# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import numpy
from .errors import CCLError



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ccllib
else:
    import _ccllib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


M_PI = _ccllib.M_PI

class physical_constants(object):
    r"""Proxy of C ccl_physical_constants struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CLIGHT_HMPC = property(_ccllib.physical_constants_CLIGHT_HMPC_get, _ccllib.physical_constants_CLIGHT_HMPC_set, doc=r"""CLIGHT_HMPC : double""")
    GNEWT = property(_ccllib.physical_constants_GNEWT_get, _ccllib.physical_constants_GNEWT_set, doc=r"""GNEWT : double""")
    SOLAR_MASS = property(_ccllib.physical_constants_SOLAR_MASS_get, _ccllib.physical_constants_SOLAR_MASS_set, doc=r"""SOLAR_MASS : double""")
    MPC_TO_METER = property(_ccllib.physical_constants_MPC_TO_METER_get, _ccllib.physical_constants_MPC_TO_METER_set, doc=r"""MPC_TO_METER : double""")
    PC_TO_METER = property(_ccllib.physical_constants_PC_TO_METER_get, _ccllib.physical_constants_PC_TO_METER_set, doc=r"""PC_TO_METER : double""")
    RHO_CRITICAL = property(_ccllib.physical_constants_RHO_CRITICAL_get, _ccllib.physical_constants_RHO_CRITICAL_set, doc=r"""RHO_CRITICAL : double""")
    KBOLTZ = property(_ccllib.physical_constants_KBOLTZ_get, _ccllib.physical_constants_KBOLTZ_set, doc=r"""KBOLTZ : double""")
    STBOLTZ = property(_ccllib.physical_constants_STBOLTZ_get, _ccllib.physical_constants_STBOLTZ_set, doc=r"""STBOLTZ : double""")
    HPLANCK = property(_ccllib.physical_constants_HPLANCK_get, _ccllib.physical_constants_HPLANCK_set, doc=r"""HPLANCK : double""")
    CLIGHT = property(_ccllib.physical_constants_CLIGHT_get, _ccllib.physical_constants_CLIGHT_set, doc=r"""CLIGHT : double""")
    EV_IN_J = property(_ccllib.physical_constants_EV_IN_J_get, _ccllib.physical_constants_EV_IN_J_set, doc=r"""EV_IN_J : double""")
    T_CMB = property(_ccllib.physical_constants_T_CMB_get, _ccllib.physical_constants_T_CMB_set, doc=r"""T_CMB : double""")
    TNCDM = property(_ccllib.physical_constants_TNCDM_get, _ccllib.physical_constants_TNCDM_set, doc=r"""TNCDM : double""")
    DELTAM12_sq = property(_ccllib.physical_constants_DELTAM12_sq_get, _ccllib.physical_constants_DELTAM12_sq_set, doc=r"""DELTAM12_sq : double""")
    DELTAM13_sq_pos = property(_ccllib.physical_constants_DELTAM13_sq_pos_get, _ccllib.physical_constants_DELTAM13_sq_pos_set, doc=r"""DELTAM13_sq_pos : double""")
    DELTAM13_sq_neg = property(_ccllib.physical_constants_DELTAM13_sq_neg_get, _ccllib.physical_constants_DELTAM13_sq_neg_set, doc=r"""DELTAM13_sq_neg : double""")

    def __init__(self):
        r"""__init__(physical_constants self) -> physical_constants"""


        _ccllib.physical_constants_swiginit(self, _ccllib.new_physical_constants())
    __swig_destroy__ = _ccllib.delete_physical_constants
    def __del__(self):
        r"""__del__(physical_constants self)"""


        pass


# Register physical_constants in _ccllib:
_ccllib.physical_constants_swigregister(physical_constants)
class spline_params(object):
    r"""Proxy of C ccl_spline_params struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A_SPLINE_NA = property(_ccllib.spline_params_A_SPLINE_NA_get, _ccllib.spline_params_A_SPLINE_NA_set, doc=r"""A_SPLINE_NA : int""")
    A_SPLINE_MIN = property(_ccllib.spline_params_A_SPLINE_MIN_get, _ccllib.spline_params_A_SPLINE_MIN_set, doc=r"""A_SPLINE_MIN : double""")
    A_SPLINE_MINLOG_PK = property(_ccllib.spline_params_A_SPLINE_MINLOG_PK_get, _ccllib.spline_params_A_SPLINE_MINLOG_PK_set, doc=r"""A_SPLINE_MINLOG_PK : double""")
    A_SPLINE_MIN_PK = property(_ccllib.spline_params_A_SPLINE_MIN_PK_get, _ccllib.spline_params_A_SPLINE_MIN_PK_set, doc=r"""A_SPLINE_MIN_PK : double""")
    A_SPLINE_MINLOG_SM = property(_ccllib.spline_params_A_SPLINE_MINLOG_SM_get, _ccllib.spline_params_A_SPLINE_MINLOG_SM_set, doc=r"""A_SPLINE_MINLOG_SM : double""")
    A_SPLINE_MIN_SM = property(_ccllib.spline_params_A_SPLINE_MIN_SM_get, _ccllib.spline_params_A_SPLINE_MIN_SM_set, doc=r"""A_SPLINE_MIN_SM : double""")
    A_SPLINE_MAX = property(_ccllib.spline_params_A_SPLINE_MAX_get, _ccllib.spline_params_A_SPLINE_MAX_set, doc=r"""A_SPLINE_MAX : double""")
    A_SPLINE_MINLOG = property(_ccllib.spline_params_A_SPLINE_MINLOG_get, _ccllib.spline_params_A_SPLINE_MINLOG_set, doc=r"""A_SPLINE_MINLOG : double""")
    A_SPLINE_NLOG = property(_ccllib.spline_params_A_SPLINE_NLOG_get, _ccllib.spline_params_A_SPLINE_NLOG_set, doc=r"""A_SPLINE_NLOG : int""")
    LOGM_SPLINE_DELTA = property(_ccllib.spline_params_LOGM_SPLINE_DELTA_get, _ccllib.spline_params_LOGM_SPLINE_DELTA_set, doc=r"""LOGM_SPLINE_DELTA : double""")
    LOGM_SPLINE_NM = property(_ccllib.spline_params_LOGM_SPLINE_NM_get, _ccllib.spline_params_LOGM_SPLINE_NM_set, doc=r"""LOGM_SPLINE_NM : int""")
    LOGM_SPLINE_MIN = property(_ccllib.spline_params_LOGM_SPLINE_MIN_get, _ccllib.spline_params_LOGM_SPLINE_MIN_set, doc=r"""LOGM_SPLINE_MIN : double""")
    LOGM_SPLINE_MAX = property(_ccllib.spline_params_LOGM_SPLINE_MAX_get, _ccllib.spline_params_LOGM_SPLINE_MAX_set, doc=r"""LOGM_SPLINE_MAX : double""")
    A_SPLINE_NA_SM = property(_ccllib.spline_params_A_SPLINE_NA_SM_get, _ccllib.spline_params_A_SPLINE_NA_SM_set, doc=r"""A_SPLINE_NA_SM : int""")
    A_SPLINE_NLOG_SM = property(_ccllib.spline_params_A_SPLINE_NLOG_SM_get, _ccllib.spline_params_A_SPLINE_NLOG_SM_set, doc=r"""A_SPLINE_NLOG_SM : int""")
    A_SPLINE_NA_PK = property(_ccllib.spline_params_A_SPLINE_NA_PK_get, _ccllib.spline_params_A_SPLINE_NA_PK_set, doc=r"""A_SPLINE_NA_PK : int""")
    A_SPLINE_NLOG_PK = property(_ccllib.spline_params_A_SPLINE_NLOG_PK_get, _ccllib.spline_params_A_SPLINE_NLOG_PK_set, doc=r"""A_SPLINE_NLOG_PK : int""")
    K_MAX_SPLINE = property(_ccllib.spline_params_K_MAX_SPLINE_get, _ccllib.spline_params_K_MAX_SPLINE_set, doc=r"""K_MAX_SPLINE : double""")
    K_MAX = property(_ccllib.spline_params_K_MAX_get, _ccllib.spline_params_K_MAX_set, doc=r"""K_MAX : double""")
    K_MIN = property(_ccllib.spline_params_K_MIN_get, _ccllib.spline_params_K_MIN_set, doc=r"""K_MIN : double""")
    DLOGK_INTEGRATION = property(_ccllib.spline_params_DLOGK_INTEGRATION_get, _ccllib.spline_params_DLOGK_INTEGRATION_set, doc=r"""DLOGK_INTEGRATION : double""")
    DCHI_INTEGRATION = property(_ccllib.spline_params_DCHI_INTEGRATION_get, _ccllib.spline_params_DCHI_INTEGRATION_set, doc=r"""DCHI_INTEGRATION : double""")
    N_K = property(_ccllib.spline_params_N_K_get, _ccllib.spline_params_N_K_set, doc=r"""N_K : int""")
    N_K_3DCOR = property(_ccllib.spline_params_N_K_3DCOR_get, _ccllib.spline_params_N_K_3DCOR_set, doc=r"""N_K_3DCOR : int""")
    ELL_MIN_CORR = property(_ccllib.spline_params_ELL_MIN_CORR_get, _ccllib.spline_params_ELL_MIN_CORR_set, doc=r"""ELL_MIN_CORR : double""")
    ELL_MAX_CORR = property(_ccllib.spline_params_ELL_MAX_CORR_get, _ccllib.spline_params_ELL_MAX_CORR_set, doc=r"""ELL_MAX_CORR : double""")
    N_ELL_CORR = property(_ccllib.spline_params_N_ELL_CORR_get, _ccllib.spline_params_N_ELL_CORR_set, doc=r"""N_ELL_CORR : int""")
    A_SPLINE_TYPE = property(_ccllib.spline_params_A_SPLINE_TYPE_get, _ccllib.spline_params_A_SPLINE_TYPE_set, doc=r"""A_SPLINE_TYPE : p.q(const).gsl_interp_type""")
    K_SPLINE_TYPE = property(_ccllib.spline_params_K_SPLINE_TYPE_get, _ccllib.spline_params_K_SPLINE_TYPE_set, doc=r"""K_SPLINE_TYPE : p.q(const).gsl_interp_type""")
    M_SPLINE_TYPE = property(_ccllib.spline_params_M_SPLINE_TYPE_get, _ccllib.spline_params_M_SPLINE_TYPE_set, doc=r"""M_SPLINE_TYPE : p.q(const).gsl_interp_type""")
    D_SPLINE_TYPE = property(_ccllib.spline_params_D_SPLINE_TYPE_get, _ccllib.spline_params_D_SPLINE_TYPE_set, doc=r"""D_SPLINE_TYPE : p.q(const).gsl_interp_type""")
    PNL_SPLINE_TYPE = property(_ccllib.spline_params_PNL_SPLINE_TYPE_get, _ccllib.spline_params_PNL_SPLINE_TYPE_set, doc=r"""PNL_SPLINE_TYPE : p.q(const).gsl_interp2d_type""")
    PLIN_SPLINE_TYPE = property(_ccllib.spline_params_PLIN_SPLINE_TYPE_get, _ccllib.spline_params_PLIN_SPLINE_TYPE_set, doc=r"""PLIN_SPLINE_TYPE : p.q(const).gsl_interp2d_type""")
    CORR_SPLINE_TYPE = property(_ccllib.spline_params_CORR_SPLINE_TYPE_get, _ccllib.spline_params_CORR_SPLINE_TYPE_set, doc=r"""CORR_SPLINE_TYPE : p.q(const).gsl_interp_type""")

    def __init__(self):
        r"""__init__(spline_params self) -> spline_params"""


        _ccllib.spline_params_swiginit(self, _ccllib.new_spline_params())
    __swig_destroy__ = _ccllib.delete_spline_params
    def __del__(self):
        r"""__del__(spline_params self)"""


        pass


# Register spline_params in _ccllib:
_ccllib.spline_params_swigregister(spline_params)
cvar = _ccllib.cvar

class gsl_params(object):
    r"""Proxy of C ccl_gsl_params struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    N_ITERATION = property(_ccllib.gsl_params_N_ITERATION_get, _ccllib.gsl_params_N_ITERATION_set, doc=r"""N_ITERATION : size_t""")
    INTEGRATION_GAUSS_KRONROD_POINTS = property(_ccllib.gsl_params_INTEGRATION_GAUSS_KRONROD_POINTS_get, _ccllib.gsl_params_INTEGRATION_GAUSS_KRONROD_POINTS_set, doc=r"""INTEGRATION_GAUSS_KRONROD_POINTS : int""")
    INTEGRATION_EPSREL = property(_ccllib.gsl_params_INTEGRATION_EPSREL_get, _ccllib.gsl_params_INTEGRATION_EPSREL_set, doc=r"""INTEGRATION_EPSREL : double""")
    INTEGRATION_LIMBER_GAUSS_KRONROD_POINTS = property(_ccllib.gsl_params_INTEGRATION_LIMBER_GAUSS_KRONROD_POINTS_get, _ccllib.gsl_params_INTEGRATION_LIMBER_GAUSS_KRONROD_POINTS_set, doc=r"""INTEGRATION_LIMBER_GAUSS_KRONROD_POINTS : int""")
    INTEGRATION_LIMBER_EPSREL = property(_ccllib.gsl_params_INTEGRATION_LIMBER_EPSREL_get, _ccllib.gsl_params_INTEGRATION_LIMBER_EPSREL_set, doc=r"""INTEGRATION_LIMBER_EPSREL : double""")
    INTEGRATION_DISTANCE_EPSREL = property(_ccllib.gsl_params_INTEGRATION_DISTANCE_EPSREL_get, _ccllib.gsl_params_INTEGRATION_DISTANCE_EPSREL_set, doc=r"""INTEGRATION_DISTANCE_EPSREL : double""")
    INTEGRATION_SIGMAR_EPSREL = property(_ccllib.gsl_params_INTEGRATION_SIGMAR_EPSREL_get, _ccllib.gsl_params_INTEGRATION_SIGMAR_EPSREL_set, doc=r"""INTEGRATION_SIGMAR_EPSREL : double""")
    INTEGRATION_KNL_EPSREL = property(_ccllib.gsl_params_INTEGRATION_KNL_EPSREL_get, _ccllib.gsl_params_INTEGRATION_KNL_EPSREL_set, doc=r"""INTEGRATION_KNL_EPSREL : double""")
    ROOT_EPSREL = property(_ccllib.gsl_params_ROOT_EPSREL_get, _ccllib.gsl_params_ROOT_EPSREL_set, doc=r"""ROOT_EPSREL : double""")
    ROOT_N_ITERATION = property(_ccllib.gsl_params_ROOT_N_ITERATION_get, _ccllib.gsl_params_ROOT_N_ITERATION_set, doc=r"""ROOT_N_ITERATION : int""")
    ODE_GROWTH_EPSREL = property(_ccllib.gsl_params_ODE_GROWTH_EPSREL_get, _ccllib.gsl_params_ODE_GROWTH_EPSREL_set, doc=r"""ODE_GROWTH_EPSREL : double""")
    EPS_SCALEFAC_GROWTH = property(_ccllib.gsl_params_EPS_SCALEFAC_GROWTH_get, _ccllib.gsl_params_EPS_SCALEFAC_GROWTH_set, doc=r"""EPS_SCALEFAC_GROWTH : double""")
    HM_MMIN = property(_ccllib.gsl_params_HM_MMIN_get, _ccllib.gsl_params_HM_MMIN_set, doc=r"""HM_MMIN : double""")
    HM_MMAX = property(_ccllib.gsl_params_HM_MMAX_get, _ccllib.gsl_params_HM_MMAX_set, doc=r"""HM_MMAX : double""")
    HM_EPSABS = property(_ccllib.gsl_params_HM_EPSABS_get, _ccllib.gsl_params_HM_EPSABS_set, doc=r"""HM_EPSABS : double""")
    HM_EPSREL = property(_ccllib.gsl_params_HM_EPSREL_get, _ccllib.gsl_params_HM_EPSREL_set, doc=r"""HM_EPSREL : double""")
    HM_LIMIT = property(_ccllib.gsl_params_HM_LIMIT_get, _ccllib.gsl_params_HM_LIMIT_set, doc=r"""HM_LIMIT : size_t""")
    HM_INT_METHOD = property(_ccllib.gsl_params_HM_INT_METHOD_get, _ccllib.gsl_params_HM_INT_METHOD_set, doc=r"""HM_INT_METHOD : int""")
    NZ_NORM_SPLINE_INTEGRATION = property(_ccllib.gsl_params_NZ_NORM_SPLINE_INTEGRATION_get, _ccllib.gsl_params_NZ_NORM_SPLINE_INTEGRATION_set, doc=r"""NZ_NORM_SPLINE_INTEGRATION : bool""")
    LENSING_KERNEL_SPLINE_INTEGRATION = property(_ccllib.gsl_params_LENSING_KERNEL_SPLINE_INTEGRATION_get, _ccllib.gsl_params_LENSING_KERNEL_SPLINE_INTEGRATION_set, doc=r"""LENSING_KERNEL_SPLINE_INTEGRATION : bool""")

    def __init__(self):
        r"""__init__(gsl_params self) -> gsl_params"""


        _ccllib.gsl_params_swiginit(self, _ccllib.new_gsl_params())
    __swig_destroy__ = _ccllib.delete_gsl_params
    def __del__(self):
        r"""__del__(gsl_params self)"""


        pass


# Register gsl_params in _ccllib:
_ccllib.gsl_params_swigregister(gsl_params)
class parameters(object):
    r"""Proxy of C ccl_parameters struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Omega_c = property(_ccllib.parameters_Omega_c_get, _ccllib.parameters_Omega_c_set, doc=r"""Omega_c : double""")
    Omega_b = property(_ccllib.parameters_Omega_b_get, _ccllib.parameters_Omega_b_set, doc=r"""Omega_b : double""")
    Omega_m = property(_ccllib.parameters_Omega_m_get, _ccllib.parameters_Omega_m_set, doc=r"""Omega_m : double""")
    Omega_k = property(_ccllib.parameters_Omega_k_get, _ccllib.parameters_Omega_k_set, doc=r"""Omega_k : double""")
    sqrtk = property(_ccllib.parameters_sqrtk_get, _ccllib.parameters_sqrtk_set, doc=r"""sqrtk : double""")
    k_sign = property(_ccllib.parameters_k_sign_get, _ccllib.parameters_k_sign_set, doc=r"""k_sign : int""")
    w0 = property(_ccllib.parameters_w0_get, _ccllib.parameters_w0_set, doc=r"""w0 : double""")
    wa = property(_ccllib.parameters_wa_get, _ccllib.parameters_wa_set, doc=r"""wa : double""")
    H0 = property(_ccllib.parameters_H0_get, _ccllib.parameters_H0_set, doc=r"""H0 : double""")
    h = property(_ccllib.parameters_h_get, _ccllib.parameters_h_set, doc=r"""h : double""")
    Neff = property(_ccllib.parameters_Neff_get, _ccllib.parameters_Neff_set, doc=r"""Neff : double""")
    N_nu_mass = property(_ccllib.parameters_N_nu_mass_get, _ccllib.parameters_N_nu_mass_set, doc=r"""N_nu_mass : int""")
    N_nu_rel = property(_ccllib.parameters_N_nu_rel_get, _ccllib.parameters_N_nu_rel_set, doc=r"""N_nu_rel : double""")
    m_nu = property(_ccllib.parameters_m_nu_get, _ccllib.parameters_m_nu_set, doc=r"""m_nu : p.double""")
    sum_nu_masses = property(_ccllib.parameters_sum_nu_masses_get, _ccllib.parameters_sum_nu_masses_set, doc=r"""sum_nu_masses : double""")
    Omega_nu_mass = property(_ccllib.parameters_Omega_nu_mass_get, _ccllib.parameters_Omega_nu_mass_set, doc=r"""Omega_nu_mass : double""")
    Omega_nu_rel = property(_ccllib.parameters_Omega_nu_rel_get, _ccllib.parameters_Omega_nu_rel_set, doc=r"""Omega_nu_rel : double""")
    A_s = property(_ccllib.parameters_A_s_get, _ccllib.parameters_A_s_set, doc=r"""A_s : double""")
    n_s = property(_ccllib.parameters_n_s_get, _ccllib.parameters_n_s_set, doc=r"""n_s : double""")
    Omega_g = property(_ccllib.parameters_Omega_g_get, _ccllib.parameters_Omega_g_set, doc=r"""Omega_g : double""")
    T_CMB = property(_ccllib.parameters_T_CMB_get, _ccllib.parameters_T_CMB_set, doc=r"""T_CMB : double""")
    bcm_log10Mc = property(_ccllib.parameters_bcm_log10Mc_get, _ccllib.parameters_bcm_log10Mc_set, doc=r"""bcm_log10Mc : double""")
    bcm_etab = property(_ccllib.parameters_bcm_etab_get, _ccllib.parameters_bcm_etab_set, doc=r"""bcm_etab : double""")
    bcm_ks = property(_ccllib.parameters_bcm_ks_get, _ccllib.parameters_bcm_ks_set, doc=r"""bcm_ks : double""")
    mu_0 = property(_ccllib.parameters_mu_0_get, _ccllib.parameters_mu_0_set, doc=r"""mu_0 : double""")
    sigma_0 = property(_ccllib.parameters_sigma_0_get, _ccllib.parameters_sigma_0_set, doc=r"""sigma_0 : double""")
    c1_mg = property(_ccllib.parameters_c1_mg_get, _ccllib.parameters_c1_mg_set, doc=r"""c1_mg : double""")
    c2_mg = property(_ccllib.parameters_c2_mg_get, _ccllib.parameters_c2_mg_set, doc=r"""c2_mg : double""")
    lambda_mg = property(_ccllib.parameters_lambda_mg_get, _ccllib.parameters_lambda_mg_set, doc=r"""lambda_mg : double""")
    sigma8 = property(_ccllib.parameters_sigma8_get, _ccllib.parameters_sigma8_set, doc=r"""sigma8 : double""")
    Omega_l = property(_ccllib.parameters_Omega_l_get, _ccllib.parameters_Omega_l_set, doc=r"""Omega_l : double""")
    z_star = property(_ccllib.parameters_z_star_get, _ccllib.parameters_z_star_set, doc=r"""z_star : double""")
    has_mgrowth = property(_ccllib.parameters_has_mgrowth_get, _ccllib.parameters_has_mgrowth_set, doc=r"""has_mgrowth : bool""")
    nz_mgrowth = property(_ccllib.parameters_nz_mgrowth_get, _ccllib.parameters_nz_mgrowth_set, doc=r"""nz_mgrowth : int""")
    z_mgrowth = property(_ccllib.parameters_z_mgrowth_get, _ccllib.parameters_z_mgrowth_set, doc=r"""z_mgrowth : p.double""")
    df_mgrowth = property(_ccllib.parameters_df_mgrowth_get, _ccllib.parameters_df_mgrowth_set, doc=r"""df_mgrowth : p.double""")

    def __init__(self):
        r"""__init__(parameters self) -> parameters"""


        _ccllib.parameters_swiginit(self, _ccllib.new_parameters())
    __swig_destroy__ = _ccllib.delete_parameters
    def __del__(self):
        r"""__del__(parameters self)"""


        pass


# Register parameters in _ccllib:
_ccllib.parameters_swigregister(parameters)
class data(object):
    r"""Proxy of C ccl_data struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    growth0 = property(_ccllib.data_growth0_get, _ccllib.data_growth0_set, doc=r"""growth0 : double""")
    chi = property(_ccllib.data_chi_get, _ccllib.data_chi_set, doc=r"""chi : p.gsl_spline""")
    growth = property(_ccllib.data_growth_get, _ccllib.data_growth_set, doc=r"""growth : p.gsl_spline""")
    fgrowth = property(_ccllib.data_fgrowth_get, _ccllib.data_fgrowth_set, doc=r"""fgrowth : p.gsl_spline""")
    E = property(_ccllib.data_E_get, _ccllib.data_E_set, doc=r"""E : p.gsl_spline""")
    achi = property(_ccllib.data_achi_get, _ccllib.data_achi_set, doc=r"""achi : p.gsl_spline""")
    logsigma = property(_ccllib.data_logsigma_get, _ccllib.data_logsigma_set, doc=r"""logsigma : p.gsl_spline2d""")
    rsd_splines = property(_ccllib.data_rsd_splines_get, _ccllib.data_rsd_splines_set, doc=r"""rsd_splines : a(3).p.ccl_f1d_t""")
    rsd_splines_scalefactor = property(_ccllib.data_rsd_splines_scalefactor_get, _ccllib.data_rsd_splines_scalefactor_set, doc=r"""rsd_splines_scalefactor : double""")

    def __init__(self):
        r"""__init__(data self) -> data"""


        _ccllib.data_swiginit(self, _ccllib.new_data())
    __swig_destroy__ = _ccllib.delete_data
    def __del__(self):
        r"""__del__(data self)"""


        pass


# Register data in _ccllib:
_ccllib.data_swigregister(data)
class cosmology(object):
    r"""Proxy of C ccl_cosmology struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    params = property(_ccllib.cosmology_params_get, _ccllib.cosmology_params_set, doc=r"""params : ccl_parameters""")
    config = property(_ccllib.cosmology_config_get, _ccllib.cosmology_config_set, doc=r"""config : ccl_configuration""")
    data = property(_ccllib.cosmology_data_get, _ccllib.cosmology_data_set, doc=r"""data : ccl_data""")
    spline_params = property(_ccllib.cosmology_spline_params_get, _ccllib.cosmology_spline_params_set, doc=r"""spline_params : ccl_spline_params""")
    gsl_params = property(_ccllib.cosmology_gsl_params_get, _ccllib.cosmology_gsl_params_set, doc=r"""gsl_params : ccl_gsl_params""")
    computed_distances = property(_ccllib.cosmology_computed_distances_get, _ccllib.cosmology_computed_distances_set, doc=r"""computed_distances : bool""")
    computed_growth = property(_ccllib.cosmology_computed_growth_get, _ccllib.cosmology_computed_growth_set, doc=r"""computed_growth : bool""")
    computed_sigma = property(_ccllib.cosmology_computed_sigma_get, _ccllib.cosmology_computed_sigma_set, doc=r"""computed_sigma : bool""")
    status = property(_ccllib.cosmology_status_get, _ccllib.cosmology_status_set, doc=r"""status : int""")
    status_message = property(_ccllib.cosmology_status_message_get, _ccllib.cosmology_status_message_set, doc=r"""status_message : a(500).char""")

    def __init__(self):
        r"""__init__(cosmology self) -> cosmology"""


        _ccllib.cosmology_swiginit(self, _ccllib.new_cosmology())
    __swig_destroy__ = _ccllib.delete_cosmology
    def __del__(self):
        r"""__del__(cosmology self)"""


        pass


# Register cosmology in _ccllib:
_ccllib.cosmology_swigregister(cosmology)

def cosmology_create(params, config):
    r"""cosmology_create(parameters params, configuration config) -> cosmology"""
    return _ccllib.cosmology_create(params, config)

def cosmology_set_status_message(*args):
    r"""cosmology_set_status_message(cosmology cosmo, char const * status_message)"""
    return _ccllib.cosmology_set_status_message(*args)

def parameters_create(Omega_c, Omega_b, Omega_k, Neff, mnu, n_mnu, w0, wa, h, norm_pk, n_s, bcm_log10Mc, bcm_etab, bcm_ks, mu_0, sigma_0, c1_mg, c2_mg, lambda_mg, nz_mgrowth, zarr_mgrowth, dfarr_mgrowth, status):
    r"""parameters_create(double Omega_c, double Omega_b, double Omega_k, double Neff, double * mnu, int n_mnu, double w0, double wa, double h, double norm_pk, double n_s, double bcm_log10Mc, double bcm_etab, double bcm_ks, double mu_0, double sigma_0, double c1_mg, double c2_mg, double lambda_mg, int nz_mgrowth, double * zarr_mgrowth, double * dfarr_mgrowth, int * status) -> parameters"""
    return _ccllib.parameters_create(Omega_c, Omega_b, Omega_k, Neff, mnu, n_mnu, w0, wa, h, norm_pk, n_s, bcm_log10Mc, bcm_etab, bcm_ks, mu_0, sigma_0, c1_mg, c2_mg, lambda_mg, nz_mgrowth, zarr_mgrowth, dfarr_mgrowth, status)

def parameters_free(params):
    r"""parameters_free(parameters params)"""
    return _ccllib.parameters_free(params)

def cosmology_free(cosmo):
    r"""cosmology_free(cosmology cosmo)"""
    return _ccllib.cosmology_free(cosmo)

def get_pk_spline_na(cosmo):
    r"""get_pk_spline_na(cosmology cosmo) -> int"""
    return _ccllib.get_pk_spline_na(cosmo)

def get_pk_spline_nk(cosmo):
    r"""get_pk_spline_nk(cosmology cosmo) -> int"""
    return _ccllib.get_pk_spline_nk(cosmo)

def get_pk_spline_a_array(cosmo, ndout, doutput, status):
    r"""get_pk_spline_a_array(cosmology cosmo, int ndout, double * doutput, int * status)"""
    return _ccllib.get_pk_spline_a_array(cosmo, ndout, doutput, status)

def get_pk_spline_lk_array(cosmo, ndout, doutput, status):
    r"""get_pk_spline_lk_array(cosmology cosmo, int ndout, double * doutput, int * status)"""
    return _ccllib.get_pk_spline_lk_array(cosmo, ndout, doutput, status)

def get_pk_spline_a_array_from_params(spline_params, ndout, doutput, status):
    r"""get_pk_spline_a_array_from_params(spline_params spline_params, int ndout, double * doutput, int * status)"""
    return _ccllib.get_pk_spline_a_array_from_params(spline_params, ndout, doutput, status)

def get_pk_spline_lk_array_from_params(spline_params, ndout, doutput, status):
    r"""get_pk_spline_lk_array_from_params(spline_params spline_params, int ndout, double * doutput, int * status)"""
    return _ccllib.get_pk_spline_lk_array_from_params(spline_params, ndout, doutput, status)

def parameters_get_nu_masses(params, nout):
    r"""parameters_get_nu_masses(parameters params, int nout)"""
    return _ccllib.parameters_get_nu_masses(params, nout)

def parameters_create_nu(Omega_c, Omega_b, Omega_k, Neff, w0, wa, h, norm_pk, n_s, bcm_log10Mc, bcm_etab, bcm_ks, mu_0, sigma_0, c1_mg, c2_mg, lambda_mg, m_nu, status):
    r"""parameters_create_nu(double Omega_c, double Omega_b, double Omega_k, double Neff, double w0, double wa, double h, double norm_pk, double n_s, double bcm_log10Mc, double bcm_etab, double bcm_ks, double mu_0, double sigma_0, double c1_mg, double c2_mg, double lambda_mg, double * m_nu, int * status) -> parameters"""
    return _ccllib.parameters_create_nu(Omega_c, Omega_b, Omega_k, Neff, w0, wa, h, norm_pk, n_s, bcm_log10Mc, bcm_etab, bcm_ks, mu_0, sigma_0, c1_mg, c2_mg, lambda_mg, m_nu, status)

def parameters_create_nu_vec(Omega_c, Omega_b, Omega_k, Neff, w0, wa, h, norm_pk, n_s, bcm_log10Mc, bcm_etab, bcm_ks, mu_0, sigma_0, c1_mg, c2_mg, lambda_mg, zarr, dfarr, m_nu, status):
    r"""parameters_create_nu_vec(double Omega_c, double Omega_b, double Omega_k, double Neff, double w0, double wa, double h, double norm_pk, double n_s, double bcm_log10Mc, double bcm_etab, double bcm_ks, double mu_0, double sigma_0, double c1_mg, double c2_mg, double lambda_mg, double * zarr, double * dfarr, double * m_nu, int * status) -> parameters"""

    if numpy.shape(zarr) != numpy.shape(dfarr):
        raise CCLError("Input shape for `zarr` must match `dfarr`!")


    return _ccllib.parameters_create_nu_vec(Omega_c, Omega_b, Omega_k, Neff, w0, wa, h, norm_pk, n_s, bcm_log10Mc, bcm_etab, bcm_ks, mu_0, sigma_0, c1_mg, c2_mg, lambda_mg, zarr, dfarr, m_nu, status)
f2d_cclgrowth = _ccllib.f2d_cclgrowth

f2d_constantgrowth = _ccllib.f2d_constantgrowth

f2d_no_extrapol = _ccllib.f2d_no_extrapol

f2d_3 = _ccllib.f2d_3

class f2d_t(object):
    r"""Proxy of C ccl_f2d_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lkmin = property(_ccllib.f2d_t_lkmin_get, _ccllib.f2d_t_lkmin_set, doc=r"""lkmin : double""")
    lkmax = property(_ccllib.f2d_t_lkmax_get, _ccllib.f2d_t_lkmax_set, doc=r"""lkmax : double""")
    amin = property(_ccllib.f2d_t_amin_get, _ccllib.f2d_t_amin_set, doc=r"""amin : double""")
    amax = property(_ccllib.f2d_t_amax_get, _ccllib.f2d_t_amax_set, doc=r"""amax : double""")
    is_factorizable = property(_ccllib.f2d_t_is_factorizable_get, _ccllib.f2d_t_is_factorizable_set, doc=r"""is_factorizable : int""")
    is_k_constant = property(_ccllib.f2d_t_is_k_constant_get, _ccllib.f2d_t_is_k_constant_set, doc=r"""is_k_constant : int""")
    is_a_constant = property(_ccllib.f2d_t_is_a_constant_get, _ccllib.f2d_t_is_a_constant_set, doc=r"""is_a_constant : int""")
    extrap_order_lok = property(_ccllib.f2d_t_extrap_order_lok_get, _ccllib.f2d_t_extrap_order_lok_set, doc=r"""extrap_order_lok : int""")
    extrap_order_hik = property(_ccllib.f2d_t_extrap_order_hik_get, _ccllib.f2d_t_extrap_order_hik_set, doc=r"""extrap_order_hik : int""")
    extrap_linear_growth = property(_ccllib.f2d_t_extrap_linear_growth_get, _ccllib.f2d_t_extrap_linear_growth_set, doc=r"""extrap_linear_growth : ccl_f2d_extrap_growth_t""")
    is_log = property(_ccllib.f2d_t_is_log_get, _ccllib.f2d_t_is_log_set, doc=r"""is_log : int""")
    growth_factor_0 = property(_ccllib.f2d_t_growth_factor_0_get, _ccllib.f2d_t_growth_factor_0_set, doc=r"""growth_factor_0 : double""")
    growth_exponent = property(_ccllib.f2d_t_growth_exponent_get, _ccllib.f2d_t_growth_exponent_set, doc=r"""growth_exponent : int""")
    fk = property(_ccllib.f2d_t_fk_get, _ccllib.f2d_t_fk_set, doc=r"""fk : p.gsl_spline""")
    fa = property(_ccllib.f2d_t_fa_get, _ccllib.f2d_t_fa_set, doc=r"""fa : p.gsl_spline""")
    fka = property(_ccllib.f2d_t_fka_get, _ccllib.f2d_t_fka_set, doc=r"""fka : p.gsl_spline2d""")

    def __init__(self):
        r"""__init__(f2d_t self) -> f2d_t"""


        _ccllib.f2d_t_swiginit(self, _ccllib.new_f2d_t())
    __swig_destroy__ = _ccllib.delete_f2d_t
    def __del__(self):
        r"""__del__(f2d_t self)"""


        pass


# Register f2d_t in _ccllib:
_ccllib.f2d_t_swigregister(f2d_t)

def f2d_t_new(na, a_arr, nk, lk_arr, fka_arr, fk_arr, fa_arr, is_factorizable, extrap_order_lok, extrap_order_hik, extrap_linear_growth, is_fka_log, growth_factor_0, growth_exponent, interp_type, status):
    r"""f2d_t_new(int na, double * a_arr, int nk, double * lk_arr, double * fka_arr, double * fk_arr, double * fa_arr, int is_factorizable, int extrap_order_lok, int extrap_order_hik, ccl_f2d_extrap_growth_t extrap_linear_growth, int is_fka_log, double growth_factor_0, int growth_exponent, ccl_f2d_interp_t interp_type, int * status) -> f2d_t"""


    return _ccllib.f2d_t_new(na, a_arr, nk, lk_arr, fka_arr, fk_arr, fa_arr, is_factorizable, extrap_order_lok, extrap_order_hik, extrap_linear_growth, is_fka_log, growth_factor_0, growth_exponent, interp_type, status)

def f2d_t_eval(fka, lk, a, cosmo, status):
    r"""f2d_t_eval(f2d_t fka, double lk, double a, void * cosmo, int * status) -> double"""


    return _ccllib.f2d_t_eval(fka, lk, a, cosmo, status)

def f2d_t_dlogf_dlk_eval(f2d, lk, a, cosmo, status):
    r"""f2d_t_dlogf_dlk_eval(f2d_t f2d, double lk, double a, void * cosmo, int * status) -> double"""


    return _ccllib.f2d_t_dlogf_dlk_eval(f2d, lk, a, cosmo, status)

def f2d_t_free(fka):
    r"""f2d_t_free(f2d_t fka)"""


    return _ccllib.f2d_t_free(fka)

def f2d_t_copy(f2d_o, status):
    r"""f2d_t_copy(f2d_t f2d_o, int * status) -> f2d_t"""


    return _ccllib.f2d_t_copy(f2d_o, status)

def set_pk2d_new_from_arrays(lkarr, aarr, pkarr, order_lok, order_hik, is_logp, status):
    r"""set_pk2d_new_from_arrays(double * lkarr, double * aarr, double * pkarr, int order_lok, int order_hik, int is_logp, int * status) -> f2d_t"""


    return _ccllib.set_pk2d_new_from_arrays(lkarr, aarr, pkarr, order_lok, order_hik, is_logp, status)

def get_pk_spline_a(cosmo, ndout, status):
    r"""get_pk_spline_a(cosmology cosmo, int ndout, int * status)"""


    return _ccllib.get_pk_spline_a(cosmo, ndout, status)

def get_pk_spline_a_from_params(spline_params, ndout, status):
    r"""get_pk_spline_a_from_params(spline_params spline_params, int ndout, int * status)"""


    return _ccllib.get_pk_spline_a_from_params(spline_params, ndout, status)

def get_pk_spline_lk(cosmo, ndout, status):
    r"""get_pk_spline_lk(cosmology cosmo, int ndout, int * status)"""


    return _ccllib.get_pk_spline_lk(cosmo, ndout, status)

def get_pk_spline_lk_from_params(spline_params, ndout, status):
    r"""get_pk_spline_lk_from_params(spline_params spline_params, int ndout, int * status)"""


    return _ccllib.get_pk_spline_lk_from_params(spline_params, ndout, status)

def pk2d_eval_single(psp, lk, a, cosmo, status):
    r"""pk2d_eval_single(f2d_t psp, double lk, double a, cosmology cosmo, int * status) -> double"""


    return _ccllib.pk2d_eval_single(psp, lk, a, cosmo, status)

def pk2d_eval_multi(psp, lkarr, a, cosmo, ndout, status):
    r"""pk2d_eval_multi(f2d_t psp, double * lkarr, double a, cosmology cosmo, int ndout, int * status)"""


    return _ccllib.pk2d_eval_multi(psp, lkarr, a, cosmo, ndout, status)

def pk2d_der_eval_single(psp, lk, a, cosmo, status):
    r"""pk2d_der_eval_single(f2d_t psp, double lk, double a, cosmology cosmo, int * status) -> double"""


    return _ccllib.pk2d_der_eval_single(psp, lk, a, cosmo, status)

def pk2d_der_eval_multi(psp, lkarr, a, cosmo, ndout, status):
    r"""pk2d_der_eval_multi(f2d_t psp, double * lkarr, double a, cosmology cosmo, int ndout, int * status)"""


    return _ccllib.pk2d_der_eval_multi(psp, lkarr, a, cosmo, ndout, status)
class a_finder(object):
    r"""Proxy of C ccl_a_finder struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ia_last = property(_ccllib.a_finder_ia_last_get, _ccllib.a_finder_ia_last_set, doc=r"""ia_last : int""")
    amin = property(_ccllib.a_finder_amin_get, _ccllib.a_finder_amin_set, doc=r"""amin : double""")
    amax = property(_ccllib.a_finder_amax_get, _ccllib.a_finder_amax_set, doc=r"""amax : double""")
    na = property(_ccllib.a_finder_na_get, _ccllib.a_finder_na_set, doc=r"""na : int""")
    a_arr = property(_ccllib.a_finder_a_arr_get, _ccllib.a_finder_a_arr_set, doc=r"""a_arr : p.double""")

    def __init__(self):
        r"""__init__(a_finder self) -> a_finder"""


        _ccllib.a_finder_swiginit(self, _ccllib.new_a_finder())
    __swig_destroy__ = _ccllib.delete_a_finder
    def __del__(self):
        r"""__del__(a_finder self)"""


        pass


# Register a_finder in _ccllib:
_ccllib.a_finder_swigregister(a_finder)

def a_finder_new(na, a_arr):
    r"""a_finder_new(int na, double * a_arr) -> a_finder"""


    return _ccllib.a_finder_new(na, a_arr)

def a_finder_free(finda):
    r"""a_finder_free(a_finder finda)"""


    return _ccllib.a_finder_free(finda)

def find_a_index(finda, a):
    r"""find_a_index(a_finder finda, double a) -> int"""


    return _ccllib.find_a_index(finda, a)
class f3d_t(object):
    r"""Proxy of C ccl_f3d_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lkmin = property(_ccllib.f3d_t_lkmin_get, _ccllib.f3d_t_lkmin_set, doc=r"""lkmin : double""")
    lkmax = property(_ccllib.f3d_t_lkmax_get, _ccllib.f3d_t_lkmax_set, doc=r"""lkmax : double""")
    na = property(_ccllib.f3d_t_na_get, _ccllib.f3d_t_na_set, doc=r"""na : int""")
    a_arr = property(_ccllib.f3d_t_a_arr_get, _ccllib.f3d_t_a_arr_set, doc=r"""a_arr : p.double""")
    is_product = property(_ccllib.f3d_t_is_product_get, _ccllib.f3d_t_is_product_set, doc=r"""is_product : int""")
    extrap_order_lok = property(_ccllib.f3d_t_extrap_order_lok_get, _ccllib.f3d_t_extrap_order_lok_set, doc=r"""extrap_order_lok : int""")
    extrap_order_hik = property(_ccllib.f3d_t_extrap_order_hik_get, _ccllib.f3d_t_extrap_order_hik_set, doc=r"""extrap_order_hik : int""")
    extrap_linear_growth = property(_ccllib.f3d_t_extrap_linear_growth_get, _ccllib.f3d_t_extrap_linear_growth_set, doc=r"""extrap_linear_growth : ccl_f2d_extrap_growth_t""")
    is_log = property(_ccllib.f3d_t_is_log_get, _ccllib.f3d_t_is_log_set, doc=r"""is_log : int""")
    growth_factor_0 = property(_ccllib.f3d_t_growth_factor_0_get, _ccllib.f3d_t_growth_factor_0_set, doc=r"""growth_factor_0 : double""")
    growth_exponent = property(_ccllib.f3d_t_growth_exponent_get, _ccllib.f3d_t_growth_exponent_set, doc=r"""growth_exponent : int""")
    fka_1 = property(_ccllib.f3d_t_fka_1_get, _ccllib.f3d_t_fka_1_set, doc=r"""fka_1 : p.ccl_f2d_t""")
    fka_2 = property(_ccllib.f3d_t_fka_2_get, _ccllib.f3d_t_fka_2_set, doc=r"""fka_2 : p.ccl_f2d_t""")
    tkka = property(_ccllib.f3d_t_tkka_get, _ccllib.f3d_t_tkka_set, doc=r"""tkka : p.p.gsl_spline2d""")

    def __init__(self):
        r"""__init__(f3d_t self) -> f3d_t"""


        _ccllib.f3d_t_swiginit(self, _ccllib.new_f3d_t())
    __swig_destroy__ = _ccllib.delete_f3d_t
    def __del__(self):
        r"""__del__(f3d_t self)"""


        pass


# Register f3d_t in _ccllib:
_ccllib.f3d_t_swigregister(f3d_t)

def f3d_t_new(na, a_arr, nk, lk_arr, tkka_arr, fka1_arr, fka2_arr, is_product, extrap_order_lok, extrap_order_hik, extrap_linear_growth, is_tkka_log, growth_factor_0, growth_exponent, interp_type, status):
    r"""f3d_t_new(int na, double * a_arr, int nk, double * lk_arr, double * tkka_arr, double * fka1_arr, double * fka2_arr, int is_product, int extrap_order_lok, int extrap_order_hik, ccl_f2d_extrap_growth_t extrap_linear_growth, int is_tkka_log, double growth_factor_0, int growth_exponent, ccl_f2d_interp_t interp_type, int * status) -> f3d_t"""


    return _ccllib.f3d_t_new(na, a_arr, nk, lk_arr, tkka_arr, fka1_arr, fka2_arr, is_product, extrap_order_lok, extrap_order_hik, extrap_linear_growth, is_tkka_log, growth_factor_0, growth_exponent, interp_type, status)

def f3d_t_eval(f3d, lk1, lk2, a, finda, cosmo, status):
    r"""f3d_t_eval(f3d_t f3d, double lk1, double lk2, double a, a_finder finda, void * cosmo, int * status) -> double"""


    return _ccllib.f3d_t_eval(f3d, lk1, lk2, a, finda, cosmo, status)

def f3d_t_free(f3d):
    r"""f3d_t_free(f3d_t f3d)"""


    return _ccllib.f3d_t_free(f3d)

def f3d_t_copy(f3d_o, status):
    r"""f3d_t_copy(f3d_t f3d_o, int * status) -> f3d_t"""


    return _ccllib.f3d_t_copy(f3d_o, status)

def a_finder_new_from_f3d(f3d):
    r"""a_finder_new_from_f3d(f3d_t f3d) -> a_finder"""


    return _ccllib.a_finder_new_from_f3d(f3d)

def tk3d_new_from_arrays(lkarr, aarr, tkkarr, order_lok, order_hik, is_logp, status):
    r"""tk3d_new_from_arrays(double * lkarr, double * aarr, double * tkkarr, int order_lok, int order_hik, int is_logp, int * status) -> f3d_t"""


    return _ccllib.tk3d_new_from_arrays(lkarr, aarr, tkkarr, order_lok, order_hik, is_logp, status)

def tk3d_new_factorizable(lkarr, aarr, pk1arr, pk2arr, order_lok, order_hik, is_logp, status):
    r"""tk3d_new_factorizable(double * lkarr, double * aarr, double * pk1arr, double * pk2arr, int order_lok, int order_hik, int is_logp, int * status) -> f3d_t"""


    return _ccllib.tk3d_new_factorizable(lkarr, aarr, pk1arr, pk2arr, order_lok, order_hik, is_logp, status)

def tk3d_eval_single(tsp, lk, a, status):
    r"""tk3d_eval_single(f3d_t tsp, double lk, double a, int * status) -> double"""


    return _ccllib.tk3d_eval_single(tsp, lk, a, status)

def tk3d_eval_multi(tsp, lkarr, a, ndout, status):
    r"""tk3d_eval_multi(f3d_t tsp, double * lkarr, double a, int ndout, int * status)"""


    return _ccllib.tk3d_eval_multi(tsp, lkarr, a, ndout, status)
species_crit_label = _ccllib.species_crit_label

species_m_label = _ccllib.species_m_label

species_l_label = _ccllib.species_l_label

species_g_label = _ccllib.species_g_label

species_k_label = _ccllib.species_k_label

species_ur_label = _ccllib.species_ur_label

species_nu_label = _ccllib.species_nu_label


def h_over_h0(cosmo, a, status):
    r"""h_over_h0(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.h_over_h0(cosmo, a, status)

def h_over_h0s(cosmo, na, a, output, status):
    r"""h_over_h0s(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.h_over_h0s(cosmo, na, a, output, status)

def comoving_radial_distance(cosmo, a, status):
    r"""comoving_radial_distance(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.comoving_radial_distance(cosmo, a, status)

def comoving_radial_distances(cosmo, na, a, output, status):
    r"""comoving_radial_distances(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.comoving_radial_distances(cosmo, na, a, output, status)

def sinn(cosmo, chi, status):
    r"""sinn(cosmology cosmo, double chi, int * status) -> double"""


    return _ccllib.sinn(cosmo, chi, status)

def comoving_angular_distance(cosmo, a, status):
    r"""comoving_angular_distance(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.comoving_angular_distance(cosmo, a, status)

def comoving_angular_distances(cosmo, na, a, output, status):
    r"""comoving_angular_distances(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.comoving_angular_distances(cosmo, na, a, output, status)

def angular_diameter_distance(cosmo, a1, a2, status):
    r"""angular_diameter_distance(cosmology cosmo, double a1, double a2, int * status) -> double"""


    return _ccllib.angular_diameter_distance(cosmo, a1, a2, status)

def angular_diameter_distances(cosmo, na, a1, a2, output, status):
    r"""angular_diameter_distances(cosmology cosmo, int na, double [] a1, double [] a2, double [] output, int * status)"""


    return _ccllib.angular_diameter_distances(cosmo, na, a1, a2, output, status)

def luminosity_distance(cosmo, a, status):
    r"""luminosity_distance(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.luminosity_distance(cosmo, a, status)

def luminosity_distances(cosmo, na, a, output, status):
    r"""luminosity_distances(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.luminosity_distances(cosmo, na, a, output, status)

def distance_modulus(cosmo, a, status):
    r"""distance_modulus(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.distance_modulus(cosmo, a, status)

def distance_moduli(cosmo, na, a, output, status):
    r"""distance_moduli(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.distance_moduli(cosmo, na, a, output, status)

def growth_factor(cosmo, a, status):
    r"""growth_factor(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.growth_factor(cosmo, a, status)

def growth_factors(cosmo, na, a, output, status):
    r"""growth_factors(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.growth_factors(cosmo, na, a, output, status)

def growth_factor_unnorm(cosmo, a, status):
    r"""growth_factor_unnorm(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.growth_factor_unnorm(cosmo, a, status)

def growth_factors_unnorm(cosmo, na, a, output, status):
    r"""growth_factors_unnorm(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.growth_factors_unnorm(cosmo, na, a, output, status)

def growth_rate(cosmo, a, status):
    r"""growth_rate(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.growth_rate(cosmo, a, status)

def growth_rates(cosmo, na, a, output, status):
    r"""growth_rates(cosmology cosmo, int na, double [] a, double [] output, int * status)"""


    return _ccllib.growth_rates(cosmo, na, a, output, status)

def scale_factor_of_chi(cosmo, chi, status):
    r"""scale_factor_of_chi(cosmology cosmo, double chi, int * status) -> double"""


    return _ccllib.scale_factor_of_chi(cosmo, chi, status)

def scale_factor_of_chis(cosmo, nchi, chi, output, status):
    r"""scale_factor_of_chis(cosmology cosmo, int nchi, double [] chi, double [] output, int * status)"""


    return _ccllib.scale_factor_of_chis(cosmo, nchi, chi, output, status)

def rho_x(cosmo, a, label, is_comoving, status):
    r"""rho_x(cosmology cosmo, double a, ccl_species_x_label label, int is_comoving, int * status) -> double"""


    return _ccllib.rho_x(cosmo, a, label, is_comoving, status)

def omega_x(cosmo, a, label, status):
    r"""omega_x(cosmology cosmo, double a, ccl_species_x_label label, int * status) -> double"""


    return _ccllib.omega_x(cosmo, a, label, status)

def cosmology_compute_distances(cosmo, status):
    r"""cosmology_compute_distances(cosmology cosmo, int * status)"""


    return _ccllib.cosmology_compute_distances(cosmo, status)

def cosmology_compute_growth(cosmo, status):
    r"""cosmology_compute_growth(cosmology cosmo, int * status)"""


    return _ccllib.cosmology_compute_growth(cosmo, status)

def growth_factor_vec(cosmo, a, nout, status):
    r"""growth_factor_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.growth_factor_vec(cosmo, a, nout, status)

def growth_factor_unnorm_vec(cosmo, a, nout, status):
    r"""growth_factor_unnorm_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.growth_factor_unnorm_vec(cosmo, a, nout, status)

def growth_rate_vec(cosmo, a, nout, status):
    r"""growth_rate_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.growth_rate_vec(cosmo, a, nout, status)

def comoving_radial_distance_vec(cosmo, a, nout, status):
    r"""comoving_radial_distance_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.comoving_radial_distance_vec(cosmo, a, nout, status)

def comoving_angular_distance_vec(cosmo, a, nout, status):
    r"""comoving_angular_distance_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.comoving_angular_distance_vec(cosmo, a, nout, status)

def h_over_h0_vec(cosmo, a, nout, status):
    r"""h_over_h0_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.h_over_h0_vec(cosmo, a, nout, status)

def luminosity_distance_vec(cosmo, a, nout, status):
    r"""luminosity_distance_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.luminosity_distance_vec(cosmo, a, nout, status)

def distance_modulus_vec(cosmo, a, nout, status):
    r"""distance_modulus_vec(cosmology cosmo, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.distance_modulus_vec(cosmo, a, nout, status)

def omega_x_vec(cosmo, label, a, nout, status):
    r"""omega_x_vec(cosmology cosmo, int label, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.omega_x_vec(cosmo, label, a, nout, status)

def rho_x_vec(cosmo, label, is_comoving, a, nout, status):
    r"""rho_x_vec(cosmology cosmo, int label, int is_comoving, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.rho_x_vec(cosmo, label, is_comoving, a, nout, status)

def scale_factor_of_chi_vec(cosmo, chi, nout, status):
    r"""scale_factor_of_chi_vec(cosmology cosmo, double * chi, int nout, int * status)"""

    if numpy.shape(chi) != (nout,):
        raise CCLError("Input shape for `chi` must match `(nout,)`!")


    return _ccllib.scale_factor_of_chi_vec(cosmo, chi, nout, status)

def angular_diameter_distance_vec(cosmo, a1, a2, nout, status):
    r"""angular_diameter_distance_vec(cosmology cosmo, double * a1, double * a2, int nout, int * status)"""

    if numpy.shape(a1) != (nout,):
        raise CCLError("Input shape for `a1` must match `(nout,)`!")
    if numpy.shape(a2) != (nout,):
        raise CCLError("Input shape for `a2` must match `(nout,)`!")


    return _ccllib.angular_diameter_distance_vec(cosmo, a1, a2, nout, status)

def cosmology_distances_from_input(*args):
    r"""
    cosmology_distances_from_input(cosmology cosmo, int na, double [] a, double [] chi_a, double [] E_a, int * status)
    cosmology_distances_from_input(cosmology cosmo, double * a, double * chi, double * hoh0, int * status)
    """


    return _ccllib.cosmology_distances_from_input(*args)

def cosmology_growth_from_input(*args):
    r"""
    cosmology_growth_from_input(cosmology cosmo, int na, double [] a, double [] growth_arr, double [] fgrowth_arr, int * status)
    cosmology_growth_from_input(cosmology cosmo, double * a, double * growth, double * fgrowth, int * status)
    """


    return _ccllib.cosmology_growth_from_input(*args)

def compute_linpower_bbks(cosmo, status):
    r"""compute_linpower_bbks(cosmology cosmo, int * status) -> f2d_t"""


    return _ccllib.compute_linpower_bbks(cosmo, status)

def compute_linpower_eh(cosmo, wiggled, status):
    r"""compute_linpower_eh(cosmology cosmo, int wiggled, int * status) -> f2d_t"""


    return _ccllib.compute_linpower_eh(cosmo, wiggled, status)

def compute_power_emu(cosmo, status):
    r"""compute_power_emu(cosmology cosmo, int * status) -> f2d_t"""


    return _ccllib.compute_power_emu(cosmo, status)

def apply_halofit(cosmo, plin, status):
    r"""apply_halofit(cosmology cosmo, f2d_t plin, int * status) -> f2d_t"""


    return _ccllib.apply_halofit(cosmo, plin, status)

def rescale_linpower(cosmo, psp, rescale_mg, rescale_norm, status):
    r"""rescale_linpower(cosmology cosmo, f2d_t psp, int rescale_mg, int rescale_norm, int * status)"""


    return _ccllib.rescale_linpower(cosmo, psp, rescale_mg, rescale_norm, status)

def sigma2B(cosmo, R, a, psp, status):
    r"""sigma2B(cosmology cosmo, double R, double a, f2d_t psp, int * status) -> double"""


    return _ccllib.sigma2B(cosmo, R, a, psp, status)

def sigma2Bs(cosmo, na, a, R, sigma2B_out, psp, status):
    r"""sigma2Bs(cosmology cosmo, int na, double * a, double * R, double * sigma2B_out, f2d_t psp, int * status)"""


    return _ccllib.sigma2Bs(cosmo, na, a, R, sigma2B_out, psp, status)

def sigmaR(cosmo, R, a, psp, status):
    r"""sigmaR(cosmology cosmo, double R, double a, f2d_t psp, int * status) -> double"""


    return _ccllib.sigmaR(cosmo, R, a, psp, status)

def sigmaV(cosmo, R, a, psp, status):
    r"""sigmaV(cosmology cosmo, double R, double a, f2d_t psp, int * status) -> double"""


    return _ccllib.sigmaV(cosmo, R, a, psp, status)

def sigma8(cosmo, psp, status):
    r"""sigma8(cosmology cosmo, f2d_t psp, int * status) -> double"""


    return _ccllib.sigma8(cosmo, psp, status)

def kNL(cosmo, a, psp, status):
    r"""kNL(cosmology cosmo, double a, f2d_t psp, int * status) -> double"""


    return _ccllib.kNL(cosmo, a, psp, status)

def sigmaR_vec(cosmo, psp, a, R, nout, status):
    r"""sigmaR_vec(cosmology cosmo, f2d_t psp, double a, double * R, int nout, int * status)"""

    if numpy.shape(R) != (nout,):
        raise CCLError("Input shape for `R` must match `(nout,)`!")


    return _ccllib.sigmaR_vec(cosmo, psp, a, R, nout, status)

def sigmaV_vec(cosmo, psp, a, R, nout, status):
    r"""sigmaV_vec(cosmology cosmo, f2d_t psp, double a, double * R, int nout, int * status)"""

    if numpy.shape(R) != (nout,):
        raise CCLError("Input shape for `R` must match `(nout,)`!")


    return _ccllib.sigmaV_vec(cosmo, psp, a, R, nout, status)

def kNL_vec(cosmo, psp, a, nout, status):
    r"""kNL_vec(cosmology cosmo, f2d_t psp, double * a, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")


    return _ccllib.kNL_vec(cosmo, psp, a, nout, status)

def bcm_model_fka(cosmo, k, a, status):
    r"""bcm_model_fka(cosmology cosmo, double k, double a, int * status) -> double"""


    return _ccllib.bcm_model_fka(cosmo, k, a, status)

def bcm_correct(cosmo, psp, status):
    r"""bcm_correct(cosmology cosmo, f2d_t psp, int * status)"""


    return _ccllib.bcm_correct(cosmo, psp, status)

def bcm_model_fka_vec(cosmo, a, k, nout, status):
    r"""bcm_model_fka_vec(cosmology cosmo, double a, double * k, int nout, int * status)"""

    if numpy.shape(k) != (nout,):
        raise CCLError("Input shape for `k` must match `(nout,)`!")


    return _ccllib.bcm_model_fka_vec(cosmo, a, k, nout, status)
CCL_CORR_LGNDRE = _ccllib.CCL_CORR_LGNDRE

CCL_CORR_FFTLOG = _ccllib.CCL_CORR_FFTLOG

CCL_CORR_BESSEL = _ccllib.CCL_CORR_BESSEL

CCL_CORR_GG = _ccllib.CCL_CORR_GG

CCL_CORR_GL = _ccllib.CCL_CORR_GL

CCL_CORR_LP = _ccllib.CCL_CORR_LP

CCL_CORR_LM = _ccllib.CCL_CORR_LM


def correlation(cosmo, n_ell, ell, cls, n_theta, theta, wtheta, corr_type, do_taper_cl, taper_cl_limits, flag_method, status):
    r"""correlation(cosmology cosmo, int n_ell, double * ell, double * cls, int n_theta, double * theta, double * wtheta, int corr_type, int do_taper_cl, double * taper_cl_limits, int flag_method, int * status)"""


    return _ccllib.correlation(cosmo, n_ell, ell, cls, n_theta, theta, wtheta, corr_type, do_taper_cl, taper_cl_limits, flag_method, status)

def correlation_3d(cosmo, psp, a, n_r, r, xi, do_taper_pk, taper_pk_limits, status):
    r"""correlation_3d(cosmology cosmo, f2d_t psp, double a, int n_r, double * r, double * xi, int do_taper_pk, double * taper_pk_limits, int * status)"""


    return _ccllib.correlation_3d(cosmo, psp, a, n_r, r, xi, do_taper_pk, taper_pk_limits, status)

def correlation_multipole(cosmo, psp, a, beta, l, n_s, s, xi, status):
    r"""correlation_multipole(cosmology cosmo, f2d_t psp, double a, double beta, int l, int n_s, double * s, double * xi, int * status)"""


    return _ccllib.correlation_multipole(cosmo, psp, a, beta, l, n_s, s, xi, status)

def correlation_multipole_spline(cosmo, psp, a, status):
    r"""correlation_multipole_spline(cosmology cosmo, f2d_t psp, double a, int * status)"""


    return _ccllib.correlation_multipole_spline(cosmo, psp, a, status)

def correlation_3dRsd(cosmo, psp, a, n_s, s, mu, beta, xi, use_spline, status):
    r"""correlation_3dRsd(cosmology cosmo, f2d_t psp, double a, int n_s, double * s, double mu, double beta, double * xi, int use_spline, int * status)"""


    return _ccllib.correlation_3dRsd(cosmo, psp, a, n_s, s, mu, beta, xi, use_spline, status)

def correlation_3dRsd_avgmu(cosmo, psp, a, n_s, s, beta, xi, status):
    r"""correlation_3dRsd_avgmu(cosmology cosmo, f2d_t psp, double a, int n_s, double * s, double beta, double * xi, int * status)"""


    return _ccllib.correlation_3dRsd_avgmu(cosmo, psp, a, n_s, s, beta, xi, status)

def correlation_pi_sigma(cosmo, psp, a, beta, pi, n_sig, sig, xi, use_spline, status):
    r"""correlation_pi_sigma(cosmology cosmo, f2d_t psp, double a, double beta, double pi, int n_sig, double * sig, double * xi, int use_spline, int * status)"""


    return _ccllib.correlation_pi_sigma(cosmo, psp, a, beta, pi, n_sig, sig, xi, use_spline, status)

def correlation_vec(cosmo, larr, clarr, theta, corr_type, method, nout, status):
    r"""correlation_vec(cosmology cosmo, double * larr, double * clarr, double * theta, int corr_type, int method, int nout, int * status)"""

    if numpy.shape(larr) != numpy.shape(clarr):
        raise CCLError("Input shape for `larr` must match `clarr`!")

    if numpy.shape(theta) != (nout,):
        raise CCLError("Input shape for `theta` must match `(nout,)`!")


    return _ccllib.correlation_vec(cosmo, larr, clarr, theta, corr_type, method, nout, status)

def correlation_3d_vec(cosmo, psp, a, r, nxi, status):
    r"""correlation_3d_vec(cosmology cosmo, f2d_t psp, double a, double * r, int nxi, int * status)"""

    if numpy.shape(r) != (nxi,):
        raise CCLError("Input shape for `r` must match `(nxi,)`!")


    return _ccllib.correlation_3d_vec(cosmo, psp, a, r, nxi, status)

def correlation_multipole_vec(cosmo, psp, a, beta, l, s, nxis, status):
    r"""correlation_multipole_vec(cosmology cosmo, f2d_t psp, double a, double beta, int l, double * s, int nxis, int * status)"""

    if numpy.shape(s) != (nxis,):
        raise CCLError("Input shape for `s` must match `(nxis,)`!")


    return _ccllib.correlation_multipole_vec(cosmo, psp, a, beta, l, s, nxis, status)

def correlation_3dRsd_vec(cosmo, psp, a, mu, beta, s, nxis, use_spline, status):
    r"""correlation_3dRsd_vec(cosmology cosmo, f2d_t psp, double a, double mu, double beta, double * s, int nxis, int use_spline, int * status)"""

    if numpy.shape(s) != (nxis,):
        raise CCLError("Input shape for `s` must match `(nxis,)`!")


    return _ccllib.correlation_3dRsd_vec(cosmo, psp, a, mu, beta, s, nxis, use_spline, status)

def correlation_3dRsd_avgmu_vec(cosmo, psp, a, beta, s, nxis, status):
    r"""correlation_3dRsd_avgmu_vec(cosmology cosmo, f2d_t psp, double a, double beta, double * s, int nxis, int * status)"""

    if numpy.shape(s) != (nxis,):
        raise CCLError("Input shape for `s` must match `(nxis,)`!")


    return _ccllib.correlation_3dRsd_avgmu_vec(cosmo, psp, a, beta, s, nxis, status)

def correlation_pi_sigma_vec(cosmo, psp, a, beta, pie, sig, nxis, use_spline, status):
    r"""correlation_pi_sigma_vec(cosmology cosmo, f2d_t psp, double a, double beta, double pie, double * sig, int nxis, int use_spline, int * status)"""

    if numpy.shape(sig) != (nxis,):
        raise CCLError("Input shape for `sig` must match `(nxis,)`!")


    return _ccllib.correlation_pi_sigma_vec(cosmo, psp, a, beta, pie, sig, nxis, use_spline, status)
CCL_FRAC_RELEVANT = _ccllib.CCL_FRAC_RELEVANT

class cl_tracer_t(object):
    r"""Proxy of C ccl_cl_tracer_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    der_bessel = property(_ccllib.cl_tracer_t_der_bessel_get, _ccllib.cl_tracer_t_der_bessel_set, doc=r"""der_bessel : int""")
    der_angles = property(_ccllib.cl_tracer_t_der_angles_get, _ccllib.cl_tracer_t_der_angles_set, doc=r"""der_angles : int""")
    transfer = property(_ccllib.cl_tracer_t_transfer_get, _ccllib.cl_tracer_t_transfer_set, doc=r"""transfer : p.ccl_f2d_t""")
    kernel = property(_ccllib.cl_tracer_t_kernel_get, _ccllib.cl_tracer_t_kernel_set, doc=r"""kernel : p.ccl_f1d_t""")
    chi_min = property(_ccllib.cl_tracer_t_chi_min_get, _ccllib.cl_tracer_t_chi_min_set, doc=r"""chi_min : double""")
    chi_max = property(_ccllib.cl_tracer_t_chi_max_get, _ccllib.cl_tracer_t_chi_max_set, doc=r"""chi_max : double""")

    def __init__(self):
        r"""__init__(cl_tracer_t self) -> cl_tracer_t"""


        _ccllib.cl_tracer_t_swiginit(self, _ccllib.new_cl_tracer_t())
    __swig_destroy__ = _ccllib.delete_cl_tracer_t
    def __del__(self):
        r"""__del__(cl_tracer_t self)"""


        pass


# Register cl_tracer_t in _ccllib:
_ccllib.cl_tracer_t_swigregister(cl_tracer_t)

def cl_tracer_t_new(cosmo, der_bessel, der_angles, n_w, chi_w, w_w, na_ka, a_ka, nk_ka, lk_ka, fka_arr, fk_arr, fa_arr, is_fka_log, is_factorizable, extrap_order_lok, extrap_order_hik, status):
    r"""cl_tracer_t_new(cosmology cosmo, int der_bessel, int der_angles, int n_w, double * chi_w, double * w_w, int na_ka, double * a_ka, int nk_ka, double * lk_ka, double * fka_arr, double * fk_arr, double * fa_arr, int is_fka_log, int is_factorizable, int extrap_order_lok, int extrap_order_hik, int * status) -> cl_tracer_t"""


    return _ccllib.cl_tracer_t_new(cosmo, der_bessel, der_angles, n_w, chi_w, w_w, na_ka, a_ka, nk_ka, lk_ka, fka_arr, fk_arr, fa_arr, is_fka_log, is_factorizable, extrap_order_lok, extrap_order_hik, status)

def cl_tracer_t_free(tr):
    r"""cl_tracer_t_free(cl_tracer_t tr)"""


    return _ccllib.cl_tracer_t_free(tr)

def cl_tracer_t_get_f_ell(tr, ell, status):
    r"""cl_tracer_t_get_f_ell(cl_tracer_t tr, double ell, int * status) -> double"""


    return _ccllib.cl_tracer_t_get_f_ell(tr, ell, status)

def cl_tracer_t_get_kernel(tr, chi, status):
    r"""cl_tracer_t_get_kernel(cl_tracer_t tr, double chi, int * status) -> double"""


    return _ccllib.cl_tracer_t_get_kernel(tr, chi, status)

def cl_tracer_t_get_transfer(tr, lk, a, status):
    r"""cl_tracer_t_get_transfer(cl_tracer_t tr, double lk, double a, int * status) -> double"""


    return _ccllib.cl_tracer_t_get_transfer(tr, lk, a, status)

def get_number_counts_kernel(cosmo, nz, z_arr, nz_arr, normalize_nz, pchi_arr, status):
    r"""get_number_counts_kernel(cosmology cosmo, int nz, double * z_arr, double * nz_arr, int normalize_nz, double * pchi_arr, int * status)"""


    return _ccllib.get_number_counts_kernel(cosmo, nz, z_arr, nz_arr, normalize_nz, pchi_arr, status)

def get_nchi_lensing_kernel(nz, z_arr, status):
    r"""get_nchi_lensing_kernel(int nz, double * z_arr, int * status) -> int"""


    return _ccllib.get_nchi_lensing_kernel(nz, z_arr, status)

def get_chis_lensing_kernel(cosmo, nchi, z_max, chis, status):
    r"""get_chis_lensing_kernel(cosmology cosmo, int nchi, double z_max, double * chis, int * status)"""


    return _ccllib.get_chis_lensing_kernel(cosmo, nchi, z_max, chis, status)

def get_lensing_mag_kernel(cosmo, nz, z_arr, nz_arr, normalize_nz, z_max, nz_s, zs_arr, sz_arr, nchi, chi_arr, wL_arr, status):
    r"""get_lensing_mag_kernel(cosmology cosmo, int nz, double * z_arr, double * nz_arr, int normalize_nz, double z_max, int nz_s, double * zs_arr, double * sz_arr, int nchi, double * chi_arr, double * wL_arr, int * status)"""


    return _ccllib.get_lensing_mag_kernel(cosmo, nz, z_arr, nz_arr, normalize_nz, z_max, nz_s, zs_arr, sz_arr, nchi, chi_arr, wL_arr, status)

def get_kappa_kernel(cosmo, chi_source, nchi, chi_arr, wchi, status):
    r"""get_kappa_kernel(cosmology cosmo, double chi_source, int nchi, double * chi_arr, double * wchi, int * status)"""


    return _ccllib.get_kappa_kernel(cosmo, chi_source, nchi, chi_arr, wchi, status)
CCL_MAX_TRACERS_PER_COLLECTION = _ccllib.CCL_MAX_TRACERS_PER_COLLECTION

class cl_tracer_collection_t(object):
    r"""Proxy of C ccl_cl_tracer_collection_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n_tracers = property(_ccllib.cl_tracer_collection_t_n_tracers_get, _ccllib.cl_tracer_collection_t_n_tracers_set, doc=r"""n_tracers : int""")
    ts = property(_ccllib.cl_tracer_collection_t_ts_get, _ccllib.cl_tracer_collection_t_ts_set, doc=r"""ts : p.p.ccl_cl_tracer_t""")

    def __init__(self):
        r"""__init__(cl_tracer_collection_t self) -> cl_tracer_collection_t"""


        _ccllib.cl_tracer_collection_t_swiginit(self, _ccllib.new_cl_tracer_collection_t())
    __swig_destroy__ = _ccllib.delete_cl_tracer_collection_t
    def __del__(self):
        r"""__del__(cl_tracer_collection_t self)"""


        pass


# Register cl_tracer_collection_t in _ccllib:
_ccllib.cl_tracer_collection_t_swigregister(cl_tracer_collection_t)

def cl_tracer_collection_t_new(status):
    r"""cl_tracer_collection_t_new(int * status) -> cl_tracer_collection_t"""


    return _ccllib.cl_tracer_collection_t_new(status)

def cl_tracer_collection_t_free(trc):
    r"""cl_tracer_collection_t_free(cl_tracer_collection_t trc)"""


    return _ccllib.cl_tracer_collection_t_free(trc)

def add_cl_tracer_to_collection(trc, tr, status):
    r"""add_cl_tracer_to_collection(cl_tracer_collection_t trc, cl_tracer_t tr, int * status)"""


    return _ccllib.add_cl_tracer_to_collection(trc, tr, status)

def get_nchi_lensing_kernel_wrapper(z_n):
    r"""get_nchi_lensing_kernel_wrapper(double * z_n) -> int"""


    return _ccllib.get_nchi_lensing_kernel_wrapper(z_n)

def get_chis_lensing_kernel_wrapper(cosmo, z_max, nout, status):
    r"""get_chis_lensing_kernel_wrapper(cosmology cosmo, double z_max, int nout, int * status)"""


    return _ccllib.get_chis_lensing_kernel_wrapper(cosmo, z_max, nout, status)

def get_lensing_kernel_wrapper(cosmo, z_n, n, z_max, has_magbias, z_b, b, chi_s, nout, status):
    r"""get_lensing_kernel_wrapper(cosmology cosmo, double * z_n, double * n, double z_max, int has_magbias, double * z_b, double * b, double * chi_s, int nout, int * status)"""

    if numpy.shape(z_n) != numpy.shape(n):
        raise CCLError("Input shape for `z_n` must match `n`!")

    if numpy.shape(z_b) != numpy.shape(b):
        raise CCLError("Input shape for `z_b` must match `b`!")


    return _ccllib.get_lensing_kernel_wrapper(cosmo, z_n, n, z_max, has_magbias, z_b, b, chi_s, nout, status)

def get_kappa_kernel_wrapper(cosmo, chi_source, chi_s, nout, status):
    r"""get_kappa_kernel_wrapper(cosmology cosmo, double chi_source, double * chi_s, int nout, int * status)"""


    return _ccllib.get_kappa_kernel_wrapper(cosmo, chi_source, chi_s, nout, status)

def get_number_counts_kernel_wrapper(cosmo, z_n, n, nout, status):
    r"""get_number_counts_kernel_wrapper(cosmology cosmo, double * z_n, double * n, int nout, int * status)"""

    if numpy.shape(z_n) != numpy.shape(n):
        raise CCLError("Input shape for `z_n` must match `n`!")


    return _ccllib.get_number_counts_kernel_wrapper(cosmo, z_n, n, nout, status)

def cl_tracer_get_kernel(tr, chi_s, nout, status):
    r"""cl_tracer_get_kernel(cl_tracer_t tr, double * chi_s, int nout, int * status)"""

    if chi_s.size != nout:
        raise CCLError("Input shape for `chi_s` must match `nout`")


    return _ccllib.cl_tracer_get_kernel(tr, chi_s, nout, status)

def cl_tracer_get_f_ell(tr, ell_s, nout, status):
    r"""cl_tracer_get_f_ell(cl_tracer_t tr, double * ell_s, int nout, int * status)"""

    if ell_s.size != nout:
        raise CCLError("Input shape for `ell_s` must match `nout`")


    return _ccllib.cl_tracer_get_f_ell(tr, ell_s, nout, status)

def cl_tracer_get_transfer(tr, lk_s, a_s, nout, status):
    r"""cl_tracer_get_transfer(cl_tracer_t tr, double * lk_s, double * a_s, int nout, int * status)"""

    if a_s.size * lk_s.size != nout:
        raise CCLError("`nout` must match the shapes of `k_s` times `a_s`")


    return _ccllib.cl_tracer_get_transfer(tr, lk_s, a_s, nout, status)

def cl_tracer_t_new_wrapper(cosmo, der_bessel, der_angles, chi_s, wchi_s, a_s, lk_s, tka_s, tk_s, ta_s, is_logt, is_factorizable, is_k_constant, is_a_constant, is_kernel_constant, extrap_order_lok, extrap_order_hik, status):
    r"""cl_tracer_t_new_wrapper(cosmology cosmo, int der_bessel, int der_angles, double * chi_s, double * wchi_s, double * a_s, double * lk_s, double * tka_s, double * tk_s, double * ta_s, int is_logt, int is_factorizable, int is_k_constant, int is_a_constant, int is_kernel_constant, int extrap_order_lok, int extrap_order_hik, int * status) -> cl_tracer_t"""

    if numpy.shape(chi_s) != numpy.shape(wchi_s):
        raise CCLError("Input shape for `chi_s` must match `wchi_s`!")


    return _ccllib.cl_tracer_t_new_wrapper(cosmo, der_bessel, der_angles, chi_s, wchi_s, a_s, lk_s, tka_s, tk_s, ta_s, is_logt, is_factorizable, is_k_constant, is_a_constant, is_kernel_constant, extrap_order_lok, extrap_order_hik, status)

def angular_cls_limber(cosmo, trc1, trc2, psp, nl_out, l_out, cl_out, integration_method, status):
    r"""angular_cls_limber(cosmology cosmo, cl_tracer_collection_t trc1, cl_tracer_collection_t trc2, f2d_t psp, int nl_out, double * l_out, double * cl_out, ccl_integration_t integration_method, int * status)"""


    return _ccllib.angular_cls_limber(cosmo, trc1, trc2, psp, nl_out, l_out, cl_out, integration_method, status)

def angular_cls_nonlimber(cosmo, trc1, trc2, psp, nl_out, l_out, cl_out, status):
    r"""angular_cls_nonlimber(cosmology cosmo, cl_tracer_collection_t trc1, cl_tracer_collection_t trc2, f2d_t psp, int nl_out, int * l_out, double * cl_out, int * status)"""


    return _ccllib.angular_cls_nonlimber(cosmo, trc1, trc2, psp, nl_out, l_out, cl_out, status)

def angular_cl_covariance(cosmo, trc1, trc2, trc3, trc4, tsp, nl1_out, l1_out, nl2_out, l2_out, cov_out, integration_method, chi_exponent, kernel_extra, prefactor_extra, status):
    r"""angular_cl_covariance(cosmology cosmo, cl_tracer_collection_t trc1, cl_tracer_collection_t trc2, cl_tracer_collection_t trc3, cl_tracer_collection_t trc4, f3d_t tsp, int nl1_out, double * l1_out, int nl2_out, double * l2_out, double * cov_out, ccl_integration_t integration_method, int chi_exponent, f1d_t kernel_extra, double prefactor_extra, int * status)"""


    return _ccllib.angular_cl_covariance(cosmo, trc1, trc2, trc3, trc4, tsp, nl1_out, l1_out, nl2_out, l2_out, cov_out, integration_method, chi_exponent, kernel_extra, prefactor_extra, status)

def angular_cl_vec(cosmo, clt1, clt2, pspec, l_limber, ell, integration_type, nout, status):
    r"""angular_cl_vec(cosmology cosmo, cl_tracer_collection_t clt1, cl_tracer_collection_t clt2, f2d_t pspec, double l_limber, double * ell, int integration_type, int nout, int * status)"""

    if numpy.shape(ell) != (nout,):
        raise CCLError("Input shape for `ell` must match `(nout,)`!")


    return _ccllib.angular_cl_vec(cosmo, clt1, clt2, pspec, l_limber, ell, integration_type, nout, status)

def sigma2b_vec(cosmo, a, R, psp, nout, status):
    r"""sigma2b_vec(cosmology cosmo, double * a, double * R, f2d_t psp, int nout, int * status)"""

    if len(R) != nout:
        raise CCLError("Input shape for `R` must match `(nout,)`!")


    return _ccllib.sigma2b_vec(cosmo, a, R, psp, nout, status)

def angular_cov_vec(cosmo, clt1, clt2, clt3, clt4, tspec, ell1, ell2, integration_type, chi_exponent, prefac, nout, status):
    r"""angular_cov_vec(cosmology cosmo, cl_tracer_collection_t clt1, cl_tracer_collection_t clt2, cl_tracer_collection_t clt3, cl_tracer_collection_t clt4, f3d_t tspec, double * ell1, double * ell2, int integration_type, int chi_exponent, double prefac, int nout, int * status)"""

    if len(ell1)*len(ell2) != nout:
        raise CCLError("Input shape for `ell1` and `ell2` must match `(nout,)`!")


    return _ccllib.angular_cov_vec(cosmo, clt1, clt2, clt3, clt4, tspec, ell1, ell2, integration_type, chi_exponent, prefac, nout, status)

def angular_cov_ssc_vec(cosmo, clt1, clt2, clt3, clt4, tspec, a, s2b, ell1, ell2, integration_type, chi_exponent, prefac, nout, status):
    r"""angular_cov_ssc_vec(cosmology cosmo, cl_tracer_collection_t clt1, cl_tracer_collection_t clt2, cl_tracer_collection_t clt3, cl_tracer_collection_t clt4, f3d_t tspec, double * a, double * s2b, double * ell1, double * ell2, int integration_type, int chi_exponent, double prefac, int nout, int * status)"""

    if len(ell1)*len(ell2) != nout:
        raise CCLError("Input shape for `ell1` and `ell2` must match `(nout,)`!")


    return _ccllib.angular_cov_ssc_vec(cosmo, clt1, clt2, clt3, clt4, tspec, a, s2b, ell1, ell2, integration_type, chi_exponent, prefac, nout, status)
CCL_MAX_NU_SPECIES = _ccllib.CCL_MAX_NU_SPECIES

CCL_NU_MNUT_MIN = _ccllib.CCL_NU_MNUT_MIN

CCL_NU_MNUT_MAX = _ccllib.CCL_NU_MNUT_MAX

CCL_NU_MNUT_N = _ccllib.CCL_NU_MNUT_N

nu_normal = _ccllib.nu_normal

nu_inverted = _ccllib.nu_inverted

nu_equal = _ccllib.nu_equal

nu_sum = _ccllib.nu_sum

nu_single = _ccllib.nu_single


def Omeganuh2(a, N_nu_mass, mnu, T_CMB, status):
    r"""Omeganuh2(double a, int N_nu_mass, double * mnu, double T_CMB, int * status) -> double"""


    return _ccllib.Omeganuh2(a, N_nu_mass, mnu, T_CMB, status)

def nu_masses(OmNuh2, mass_split, T_CMB, status):
    r"""nu_masses(double OmNuh2, ccl_neutrino_mass_splits mass_split, double T_CMB, int * status) -> double *"""


    return _ccllib.nu_masses(OmNuh2, mass_split, T_CMB, status)

def Omeganuh2_vec(N_nu_mass, T_CMB, a, mnu, nout, status):
    r"""Omeganuh2_vec(int N_nu_mass, double T_CMB, double * a, double * mnu, int nout, int * status)"""

    if numpy.shape(a) != (nout,):
        raise CCLError("Input shape for `a` must match `(nout,)`!")

    if numpy.shape(mnu) != (N_nu_mass,):
        raise CCLError("Input shape for `mnu` must match `(N_nu_mass,)`!")


    return _ccllib.Omeganuh2_vec(N_nu_mass, T_CMB, a, mnu, nout, status)

def nu_masses_vec(OmNuh2, label, T_CMB, nout, status):
    r"""nu_masses_vec(double OmNuh2, int label, double T_CMB, int nout, int * status)"""


    return _ccllib.nu_masses_vec(OmNuh2, label, T_CMB, nout, status)

def rescale_musigma_s8(cosmo, psp, mg_rescale, status):
    r"""rescale_musigma_s8(cosmology cosmo, f2d_t psp, int mg_rescale, int * status)"""


    return _ccllib.rescale_musigma_s8(cosmo, psp, mg_rescale, status)

def Sig_MG(cosmo, a, k, status):
    r"""Sig_MG(cosmology cosmo, double a, double k, int * status) -> double"""


    return _ccllib.Sig_MG(cosmo, a, k, status)

def mu_MG(cosmo, a, k, status):
    r"""mu_MG(cosmology cosmo, double a, double k, int * status) -> double"""


    return _ccllib.mu_MG(cosmo, a, k, status)

def mu_MG_vec(cosmo, a, k, nout, status):
    r"""mu_MG_vec(cosmology cosmo, double * a, double * k, int nout, int * status)"""

    if (len(a)*len(k)) != nout:
        raise CCLError("Input length for `a` times `k` must match `nout`!")


    return _ccllib.mu_MG_vec(cosmo, a, k, nout, status)

def Sig_MG_vec(cosmo, a, k, nout, status):
    r"""Sig_MG_vec(cosmology cosmo, double * a, double * k, int nout, int * status)"""

    if (len(a)*len(k)) != nout:
        raise CCLError("Input length for `a` times `k` must match `nout`!")


    return _ccllib.Sig_MG_vec(cosmo, a, k, nout, status)

def convert_concentration(cosmo, delta_old, nc, c_old, delta_new, c_new, status):
    r"""convert_concentration(cosmology cosmo, double delta_old, int nc, double [] c_old, double delta_new, double [] c_new, int * status)"""

    if (len(a)*len(k)) != nout:
        raise CCLError("Input length for `a` times `k` must match `nout`!")


    return _ccllib.convert_concentration(cosmo, delta_old, nc, c_old, delta_new, c_new, status)

def convert_concentration_vec(cosmo, delta_old, c_in, delta_new, nout, status):
    r"""convert_concentration_vec(cosmology cosmo, double delta_old, double * c_in, double delta_new, int nout, int * status)"""

    if numpy.shape(c_in) != (nout,):
        raise CCLError("Input shape for `c` must match `(nout,)`!")


    return _ccllib.convert_concentration_vec(cosmo, delta_old, c_in, delta_new, nout, status)

def cosmology_compute_sigma(cosmo, psp, status):
    r"""cosmology_compute_sigma(cosmology cosmo, f2d_t psp, int * status)"""


    return _ccllib.cosmology_compute_sigma(cosmo, psp, status)

def sigmaM(cosmo, log_halomass, a, status):
    r"""sigmaM(cosmology cosmo, double log_halomass, double a, int * status) -> double"""


    return _ccllib.sigmaM(cosmo, log_halomass, a, status)

def dlnsigM_dlogM(cosmo, log_halomass, a, status):
    r"""dlnsigM_dlogM(cosmology cosmo, double log_halomass, double a, int * status) -> double"""


    return _ccllib.dlnsigM_dlogM(cosmo, log_halomass, a, status)

def dc_NakamuraSuto(cosmo, a, status):
    r"""dc_NakamuraSuto(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.dc_NakamuraSuto(cosmo, a, status)

def Dv_BryanNorman(cosmo, a, status):
    r"""Dv_BryanNorman(cosmology cosmo, double a, int * status) -> double"""


    return _ccllib.Dv_BryanNorman(cosmo, a, status)

def sigM_vec(cosmo, a, logM, nout, status):
    r"""sigM_vec(cosmology cosmo, double a, double * logM, int nout, int * status)"""

    if numpy.shape(logM) != (nout,):
        raise CCLError("Input shape for `halo_mass` must match `(nout,)`!")


    return _ccllib.sigM_vec(cosmo, a, logM, nout, status)

def dlnsigM_dlogM_vec(cosmo, a, logM, nout, status):
    r"""dlnsigM_dlogM_vec(cosmology cosmo, double a, double * logM, int nout, int * status)"""

    if numpy.shape(logM) != (nout,):
        raise CCLError("Input shape for `halo_mass` must match `(nout,)`!")


    return _ccllib.dlnsigM_dlogM_vec(cosmo, a, logM, nout, status)
f1d_extrap_0 = _ccllib.f1d_extrap_0

f1d_extrap_const = _ccllib.f1d_extrap_const

f1d_extrap_linx_liny = _ccllib.f1d_extrap_linx_liny

f1d_extrap_linx_logy = _ccllib.f1d_extrap_linx_logy

f1d_extrap_logx_liny = _ccllib.f1d_extrap_logx_liny

f1d_extrap_logx_logy = _ccllib.f1d_extrap_logx_logy

class f1d_t(object):
    r"""Proxy of C ccl_f1d_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spline = property(_ccllib.f1d_t_spline_get, _ccllib.f1d_t_spline_set, doc=r"""spline : p.gsl_spline""")
    y0 = property(_ccllib.f1d_t_y0_get, _ccllib.f1d_t_y0_set, doc=r"""y0 : double""")
    yf = property(_ccllib.f1d_t_yf_get, _ccllib.f1d_t_yf_set, doc=r"""yf : double""")
    extrap_lo_type = property(_ccllib.f1d_t_extrap_lo_type_get, _ccllib.f1d_t_extrap_lo_type_set, doc=r"""extrap_lo_type : ccl_f1d_extrap_t""")
    extrap_hi_type = property(_ccllib.f1d_t_extrap_hi_type_get, _ccllib.f1d_t_extrap_hi_type_set, doc=r"""extrap_hi_type : ccl_f1d_extrap_t""")
    x_ini = property(_ccllib.f1d_t_x_ini_get, _ccllib.f1d_t_x_ini_set, doc=r"""x_ini : double""")
    x_end = property(_ccllib.f1d_t_x_end_get, _ccllib.f1d_t_x_end_set, doc=r"""x_end : double""")
    y_ini = property(_ccllib.f1d_t_y_ini_get, _ccllib.f1d_t_y_ini_set, doc=r"""y_ini : double""")
    y_end = property(_ccllib.f1d_t_y_end_get, _ccllib.f1d_t_y_end_set, doc=r"""y_end : double""")
    der_lo = property(_ccllib.f1d_t_der_lo_get, _ccllib.f1d_t_der_lo_set, doc=r"""der_lo : double""")
    der_hi = property(_ccllib.f1d_t_der_hi_get, _ccllib.f1d_t_der_hi_set, doc=r"""der_hi : double""")

    def __init__(self):
        r"""__init__(f1d_t self) -> f1d_t"""


        _ccllib.f1d_t_swiginit(self, _ccllib.new_f1d_t())
    __swig_destroy__ = _ccllib.delete_f1d_t
    def __del__(self):
        r"""__del__(f1d_t self)"""


        pass


# Register f1d_t in _ccllib:
_ccllib.f1d_t_swigregister(f1d_t)

def f1d_t_new(n, x, y, y0, yf, extrap_lo_type, extrap_hi_type, status):
    r"""f1d_t_new(int n, double * x, double * y, double y0, double yf, ccl_f1d_extrap_t extrap_lo_type, ccl_f1d_extrap_t extrap_hi_type, int * status) -> f1d_t"""


    return _ccllib.f1d_t_new(n, x, y, y0, yf, extrap_lo_type, extrap_hi_type, status)

def f1d_t_eval(spl, x):
    r"""f1d_t_eval(f1d_t spl, double x) -> double"""


    return _ccllib.f1d_t_eval(spl, x)

def f1d_t_free(spl):
    r"""f1d_t_free(f1d_t spl)"""


    return _ccllib.f1d_t_free(spl)

def array_1d_resample(x_in, f_in, x_out, f0, ff, extrap_lo, extrap_hi, nout, status):
    r"""array_1d_resample(double * x_in, double * f_in, double * x_out, double f0, double ff, int extrap_lo, int extrap_hi, int nout, int * status)"""

    if numpy.shape(x_in) != numpy.shape(f_in):
        raise CCLError("Input shape for `x_in` must match `f_in`!")

    if numpy.shape(x_out) != (nout,):
        raise CCLError("Input shape for `x_out` must match `(nout,)`!")


    return _ccllib.array_1d_resample(x_in, f_in, x_out, f0, ff, extrap_lo, extrap_hi, nout, status)

def fftlog_ComputeXi2D(mu, epsilon, ncl, N, l, cl, th, xi, status):
    r"""fftlog_ComputeXi2D(double mu, double epsilon, int ncl, int N, double * l, double ** cl, double * th, double ** xi, int * status)"""


    return _ccllib.fftlog_ComputeXi2D(mu, epsilon, ncl, N, l, cl, th, xi, status)

def fftlog_ComputeXi3D(l, epsilon, npk, N, k, pk, r, xi, status):
    r"""fftlog_ComputeXi3D(double l, double epsilon, int npk, int N, double * k, double ** pk, double * r, double ** xi, int * status)"""


    return _ccllib.fftlog_ComputeXi3D(l, epsilon, npk, N, k, pk, r, xi, status)

def fftlog_transform(npk, k_in, fk_in, dim, mu, plaw_index, nout, status):
    r"""fftlog_transform(int npk, double * k_in, double * fk_in, int dim, double mu, double plaw_index, int nout, int * status)"""

    if npk * k_in.size != fk_in.size:
        raise CCLError("Input size for `fk_in` must match `npk * k_in.size`")

    if nout != k_in.size * (npk + 1):
        raise CCLError("Input shape for `output` must match `(k_in.size * (npk + 1),)`!")

    if (dim != 2) and (dim !=3):
        raise CCLError("`dim` must be 2 or 3")


    return _ccllib.fftlog_transform(npk, k_in, fk_in, dim, mu, plaw_index, nout, status)
integration_qag_quad = _ccllib.integration_qag_quad

integration_spline = _ccllib.integration_spline


def linear_spacing(xmin, xmax, N):
    r"""linear_spacing(double xmin, double xmax, int N) -> double *"""


    return _ccllib.linear_spacing(xmin, xmax, N)

def linlog_spacing(xminlog, xmin, xmax, Nlin, Nlog):
    r"""linlog_spacing(double xminlog, double xmin, double xmax, int Nlin, int Nlog) -> double *"""


    return _ccllib.linlog_spacing(xminlog, xmin, xmax, Nlin, Nlog)

def log_spacing(xmin, xmax, N):
    r"""log_spacing(double xmin, double xmax, int N) -> double *"""


    return _ccllib.log_spacing(xmin, xmax, N)

def j_bessel(l, x):
    r"""j_bessel(int l, double x) -> double"""


    return _ccllib.j_bessel(l, x)

def integ_spline(ny, nx, x, y, a, b, result, T, status):
    r"""integ_spline(int ny, int nx, double * x, double ** y, double a, double b, double * result, gsl_interp_type const * T, int * status)"""


    return _ccllib.integ_spline(ny, nx, x, y, a, b, result, T, status)

def openmp_version():
    r"""openmp_version() -> int"""


    return _ccllib.openmp_version()

def openmp_threads():
    r"""openmp_threads() -> int"""


    return _ccllib.openmp_threads()

def spline_integrate(n_integ, x_in, ys_in, a, b, nout, status):
    r"""spline_integrate(int n_integ, double * x_in, double * ys_in, double a, double b, int nout, int * status)"""

    if n_integ * x_in.size != ys_in.size:
        raise CCLError("Input size for `ys_in` must match `n_integ * x_in.size`")

    if nout != n_integ:
        raise CCLError("Input shape for `output` must match n_integ")


    return _ccllib.spline_integrate(n_integ, x_in, ys_in, a, b, nout, status)

def get_spline1d_array_size(spline, status):
    r"""get_spline1d_array_size(gsl_spline * spline, int * status)"""


    return _ccllib.get_spline1d_array_size(spline, status)

def get_spline2d_array_sizes(spline2d, status):
    r"""get_spline2d_array_sizes(gsl_spline2d * spline2d, int * status)"""


    return _ccllib.get_spline2d_array_sizes(spline2d, status)

def get_spline3d_array_sizes(spline2d, status):
    r"""get_spline3d_array_sizes(gsl_spline2d ** spline2d, int * status)"""


    return _ccllib.get_spline3d_array_sizes(spline2d, status)

def get_spline1d_arrays(spline, x_size, y_size, status):
    r"""get_spline1d_arrays(gsl_spline * spline, int x_size, int y_size, int * status)"""


    return _ccllib.get_spline1d_arrays(spline, x_size, y_size, status)

def get_spline2d_arrays(spline2d, x_size, y_size, z_size, status):
    r"""get_spline2d_arrays(gsl_spline2d * spline2d, int x_size, int y_size, int z_size, int * status)"""


    return _ccllib.get_spline2d_arrays(spline2d, x_size, y_size, z_size, status)

def get_spline3d_arrays(spline2d, x_size, y_size, t_size, na, status):
    r"""get_spline3d_arrays(gsl_spline2d ** spline2d, int x_size, int y_size, int t_size, int na, int * status)"""


    return _ccllib.get_spline3d_arrays(spline2d, x_size, y_size, t_size, na, status)

def get_array(arr, a_size, status):
    r"""get_array(double * arr, int a_size, int * status)"""


    return _ccllib.get_array(arr, a_size, status)
transfer_none = _ccllib.transfer_none

eisenstein_hu = _ccllib.eisenstein_hu

bbks = _ccllib.bbks

boltzmann_class = _ccllib.boltzmann_class

boltzmann_camb = _ccllib.boltzmann_camb

boltzmann_isitgr = _ccllib.boltzmann_isitgr

pklin_from_input = _ccllib.pklin_from_input

eisenstein_hu_nowiggles = _ccllib.eisenstein_hu_nowiggles

pknl_none = _ccllib.pknl_none

linear = _ccllib.linear

halofit = _ccllib.halofit

halo_model = _ccllib.halo_model

emu = _ccllib.emu

pknl_from_input = _ccllib.pknl_from_input

pknl_from_boltzman = _ccllib.pknl_from_boltzman

nobaryons = _ccllib.nobaryons

bcm = _ccllib.bcm

tinker = _ccllib.tinker

tinker10 = _ccllib.tinker10

watson = _ccllib.watson

angulo = _ccllib.angulo

shethtormen = _ccllib.shethtormen

bhattacharya2011 = _ccllib.bhattacharya2011

duffy2008 = _ccllib.duffy2008

constant_concentration = _ccllib.constant_concentration

emu_strict = _ccllib.emu_strict

emu_equalize = _ccllib.emu_equalize

class configuration(object):
    r"""Proxy of C ccl_configuration struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    transfer_function_method = property(_ccllib.configuration_transfer_function_method_get, _ccllib.configuration_transfer_function_method_set, doc=r"""transfer_function_method : transfer_function_t""")
    matter_power_spectrum_method = property(_ccllib.configuration_matter_power_spectrum_method_get, _ccllib.configuration_matter_power_spectrum_method_set, doc=r"""matter_power_spectrum_method : matter_power_spectrum_t""")
    baryons_power_spectrum_method = property(_ccllib.configuration_baryons_power_spectrum_method_get, _ccllib.configuration_baryons_power_spectrum_method_set, doc=r"""baryons_power_spectrum_method : baryons_power_spectrum_t""")
    mass_function_method = property(_ccllib.configuration_mass_function_method_get, _ccllib.configuration_mass_function_method_set, doc=r"""mass_function_method : mass_function_t""")
    halo_concentration_method = property(_ccllib.configuration_halo_concentration_method_get, _ccllib.configuration_halo_concentration_method_set, doc=r"""halo_concentration_method : halo_concentration_t""")
    emulator_neutrinos_method = property(_ccllib.configuration_emulator_neutrinos_method_get, _ccllib.configuration_emulator_neutrinos_method_set, doc=r"""emulator_neutrinos_method : emulator_neutrinos_t""")

    def __init__(self):
        r"""__init__(configuration self) -> configuration"""


        _ccllib.configuration_swiginit(self, _ccllib.new_configuration())
    __swig_destroy__ = _ccllib.delete_configuration
    def __del__(self):
        r"""__del__(configuration self)"""


        pass


# Register configuration in _ccllib:
_ccllib.configuration_swigregister(configuration)
CCL_ERROR_MEMORY = _ccllib.CCL_ERROR_MEMORY

CCL_ERROR_LINSPACE = _ccllib.CCL_ERROR_LINSPACE

CCL_ERROR_INCONSISTENT = _ccllib.CCL_ERROR_INCONSISTENT

CCL_ERROR_SPLINE = _ccllib.CCL_ERROR_SPLINE

CCL_ERROR_SPLINE_EV = _ccllib.CCL_ERROR_SPLINE_EV

CCL_ERROR_INTEG = _ccllib.CCL_ERROR_INTEG

CCL_ERROR_ROOT = _ccllib.CCL_ERROR_ROOT

CCL_ERROR_CLASS = _ccllib.CCL_ERROR_CLASS

CCL_ERROR_COMPUTECHI = _ccllib.CCL_ERROR_COMPUTECHI

CCL_ERROR_MF = _ccllib.CCL_ERROR_MF

CCL_ERROR_HMF_INTERP = _ccllib.CCL_ERROR_HMF_INTERP

CCL_ERROR_PARAMETERS = _ccllib.CCL_ERROR_PARAMETERS

CCL_ERROR_NU_INT = _ccllib.CCL_ERROR_NU_INT

CCL_ERROR_EMULATOR_BOUND = _ccllib.CCL_ERROR_EMULATOR_BOUND

CCL_ERROR_NU_SOLVE = _ccllib.CCL_ERROR_NU_SOLVE

CCL_ERROR_NOT_IMPLEMENTED = _ccllib.CCL_ERROR_NOT_IMPLEMENTED

CCL_ERROR_MNU_UNPHYSICAL = _ccllib.CCL_ERROR_MNU_UNPHYSICAL

CCL_ERROR_ANGPOW = _ccllib.CCL_ERROR_ANGPOW

CCL_ERROR_MISSING_CONFIG_FILE = _ccllib.CCL_ERROR_MISSING_CONFIG_FILE

CCL_ERROR_HALOCONC = _ccllib.CCL_ERROR_HALOCONC

CCL_ERROR_HALOWIN = _ccllib.CCL_ERROR_HALOWIN

CCL_ERROR_HMF_DV = _ccllib.CCL_ERROR_HMF_DV

CCL_ERROR_CONC_DV = _ccllib.CCL_ERROR_CONC_DV

CCL_ERROR_ONE_HALO_INT = _ccllib.CCL_ERROR_ONE_HALO_INT

CCL_ERROR_TWO_HALO_INT = _ccllib.CCL_ERROR_TWO_HALO_INT

CCL_ERROR_FILE_WRITE = _ccllib.CCL_ERROR_FILE_WRITE

CCL_ERROR_FILE_READ = _ccllib.CCL_ERROR_FILE_READ

CCL_ERROR_LOGSPACE = _ccllib.CCL_ERROR_LOGSPACE

CCL_ERROR_LINLOGSPACE = _ccllib.CCL_ERROR_LINLOGSPACE

CCL_ERROR_CONFIG_FILE = _ccllib.CCL_ERROR_CONFIG_FILE

CCL_ERROR_LOWMNU = _ccllib.CCL_ERROR_LOWMNU

CCL_ERROR_PROFILE_INT = _ccllib.CCL_ERROR_PROFILE_INT

CCL_ERROR_PROFILE_ROOT = _ccllib.CCL_ERROR_PROFILE_ROOT

CCL_ERROR_GROWTH_INIT = _ccllib.CCL_ERROR_GROWTH_INIT

CCL_ERROR_DISTANCES_INIT = _ccllib.CCL_ERROR_DISTANCES_INIT

CCL_ERROR_NONLIN_POWER_INIT = _ccllib.CCL_ERROR_NONLIN_POWER_INIT

CCL_ERROR_LINEAR_POWER_INIT = _ccllib.CCL_ERROR_LINEAR_POWER_INIT

CCL_ERROR_SIGMA_INIT = _ccllib.CCL_ERROR_SIGMA_INIT

CCL_ERROR_HMF_INIT = _ccllib.CCL_ERROR_HMF_INIT

CCL_ERROR_OVERWRITE = _ccllib.CCL_ERROR_OVERWRITE

CCL_DEBUG_MODE_OFF = _ccllib.CCL_DEBUG_MODE_OFF

CCL_DEBUG_MODE_ON = _ccllib.CCL_DEBUG_MODE_ON


def raise_warning(*args):
    r"""raise_warning(int err, char const * msg)"""


    return _ccllib.raise_warning(*args)

def raise_gsl_warning(*args):
    r"""raise_gsl_warning(int gslstatus, char const * msg)"""


    return _ccllib.raise_gsl_warning(*args)

def set_debug_policy(debug_policy):
    r"""set_debug_policy(CCLDebugModePolicy debug_policy)"""


    return _ccllib.set_debug_policy(debug_policy)

default_config = cvar.default_config

